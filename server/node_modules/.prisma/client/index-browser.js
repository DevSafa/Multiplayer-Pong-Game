
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AchievementScalarFieldEnum = makeEnum({
  achiev_id: 'achiev_id',
  name: 'name'
});

exports.Prisma.DirectMessageScalarFieldEnum = makeEnum({
  id: 'id',
  creationDate: 'creationDate',
  from: 'from',
  to: 'to',
  content_msg: 'content_msg'
});

exports.Prisma.FriendshipScalarFieldEnum = makeEnum({
  id: 'id',
  id_user_1: 'id_user_1',
  id_user_2: 'id_user_2',
  stat_block: 'stat_block'
});

exports.Prisma.InvitationfriendScalarFieldEnum = makeEnum({
  id_user_invited: 'id_user_invited',
  id_user_invit_to: 'id_user_invit_to'
});

exports.Prisma.Match_historyScalarFieldEnum = makeEnum({
  match_id: 'match_id',
  mod: 'mod',
  match_begin: 'match_begin',
  match_end: 'match_end',
  winner_id: 'winner_id',
  loser_id: 'loser_id',
  score_winner: 'score_winner',
  score_loser: 'score_loser'
});

exports.Prisma.MessageRoomScalarFieldEnum = makeEnum({
  id: 'id',
  creationDate: 'creationDate',
  from: 'from',
  room_name: 'room_name',
  content_msg: 'content_msg'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RoomScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  type: 'type',
  password: 'password',
  owner: 'owner'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserAchievScalarFieldEnum = makeEnum({
  id: 'id',
  achie_id: 'achie_id',
  user_id: 'user_id'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  login: 'login',
  username: 'username',
  avatar: 'avatar',
  email: 'email',
  token_google_auth: 'token_google_auth',
  losses: 'losses',
  wins: 'wins',
  ladder_level: 'ladder_level'
});

exports.Prisma.Users_roomScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  user_role: 'user_role',
  room_name: 'room_name',
  state_user: 'state_user'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Users_room: 'Users_room',
  Room: 'Room',
  DirectMessage: 'DirectMessage',
  MessageRoom: 'MessageRoom',
  Friendship: 'Friendship',
  Invitationfriend: 'Invitationfriend',
  UserAchiev: 'UserAchiev',
  Achievement: 'Achievement',
  match_history: 'match_history'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
