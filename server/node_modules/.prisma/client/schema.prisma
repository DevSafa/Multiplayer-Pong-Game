// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  login String @unique
  username String @unique
  avatar String ?
  email String  ? @unique 
  token_google_auth String?
  losses Int @default (0)
  wins Int @default (0)
  ladder_level Int @default (0)
  users_room Users_room[]
  room Room[]
  directmsg DirectMessage[] @relation("user1")
  dm DirectMessage[] @relation("user2")
  msg_room MessageRoom[] @relation("from")
  userachiev UserAchiev[]
  invit_friend Invitationfriend[] @relation("id_user_invited")
  invit_fr Invitationfriend[] @relation("id_user_invit_to")
  friend Friendship[] @relation("id_user_1")
  friend_rel Friendship[] @relation("id_user_2")
  match_hist1 match_history[] @relation("winner_id")
  match_hist2 match_history[] @relation("loser_id")
}

model Users_room {
  id Int @id @default(autoincrement())
  username String
  user User @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  user_role String
  room_name String
  room Room @relation(fields: [room_name], references: [name], onDelete: Cascade, onUpdate: Cascade)
  state_user String
  @@unique([username, room_name])
}

model Room {
  id Int @id @default(autoincrement())
  name String @unique
  type String
  password String?
  owner String
  user User @relation(fields: [owner], references: [username], onDelete: Cascade, onUpdate: Cascade)
  users_room Users_room[]
  msg_room MessageRoom[]
}

model DirectMessage {
  id Int @id @default(autoincrement())
  creationDate DateTime @default(now())
  from String
  user1 User @relation("user1", fields: [from], references: [username], onDelete: Cascade, onUpdate: Cascade)
  to String 
  user2 User @relation("user2", fields: [to], references: [username], onDelete: Cascade, onUpdate: Cascade)
  content_msg String
}

model MessageRoom {
  id Int @id @default(autoincrement())
  creationDate DateTime @default(now())
  from String 
  user User @relation("from", fields: [from], references: [username], onDelete: Cascade, onUpdate: Cascade)
  room_name String
  room Room @relation(fields: [room_name], references: [name], onDelete: Cascade, onUpdate: Cascade)
  content_msg String
}

model Friendship {
  id Int @id @default(autoincrement())
  id_user_1 Int
  user1 User @relation("id_user_1", fields: [id_user_1], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user_2 Int
  user2 User @relation("id_user_2", fields: [id_user_2], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stat_block Boolean @default(false)
  
}

model Invitationfriend {
  // id Int @id @default(autoincrement())
  id_user_invited Int
  user1 User @relation("id_user_invited", fields: [id_user_invited], references: [id], onDelete: Cascade, onUpdate: Cascade)
  id_user_invit_to Int 
  user2 User @relation("id_user_invit_to", fields: [id_user_invit_to], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id ([id_user_invited, id_user_invit_to])
}

model UserAchiev {
  id Int @id @default(autoincrement())
  achie_id Int
  achievement Achievement @relation(fields: [achie_id], references: [achiev_id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Achievement {
  achiev_id Int @id @default(autoincrement())
  name String
  user_achiev UserAchiev[]
}

model match_history {
  match_id Int @id @default(autoincrement())
  mod String
  match_begin DateTime
  match_end DateTime
  winner_id Int
  user1 User @relation("winner_id", fields: [winner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  loser_id Int
  user2 User @relation("loser_id", fields: [loser_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  score_winner Int
  score_loser Int
}