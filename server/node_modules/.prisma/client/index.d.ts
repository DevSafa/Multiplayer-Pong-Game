
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  login: string
  username: string
  avatar: string | null
  email: string | null
  token_google_auth: string | null
  losses: number
  wins: number
  ladder_level: number
}

/**
 * Model Users_room
 * 
 */
export type Users_room = {
  id: number
  username: string
  user_role: string
  room_name: string
  state_user: string
}

/**
 * Model Room
 * 
 */
export type Room = {
  id: number
  name: string
  type: string
  password: string | null
  owner: string
}

/**
 * Model DirectMessage
 * 
 */
export type DirectMessage = {
  id: number
  creationDate: Date
  from: string
  to: string
  content_msg: string
}

/**
 * Model MessageRoom
 * 
 */
export type MessageRoom = {
  id: number
  creationDate: Date
  from: string
  room_name: string
  content_msg: string
}

/**
 * Model Friendship
 * 
 */
export type Friendship = {
  id: number
  id_user_1: number
  id_user_2: number
  stat_block: boolean
}

/**
 * Model Invitationfriend
 * 
 */
export type Invitationfriend = {
  id_user_invited: number
  id_user_invit_to: number
}

/**
 * Model UserAchiev
 * 
 */
export type UserAchiev = {
  id: number
  achie_id: number
  user_id: number
}

/**
 * Model Achievement
 * 
 */
export type Achievement = {
  achiev_id: number
  name: string
}

/**
 * Model match_history
 * 
 */
export type match_history = {
  match_id: number
  mod: string
  match_begin: Date
  match_end: Date
  winner_id: number
  loser_id: number
  score_winner: number
  score_loser: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.users_room`: Exposes CRUD operations for the **Users_room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_rooms
    * const users_rooms = await prisma.users_room.findMany()
    * ```
    */
  get users_room(): Prisma.Users_roomDelegate<GlobalReject>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<GlobalReject>;

  /**
   * `prisma.directMessage`: Exposes CRUD operations for the **DirectMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DirectMessages
    * const directMessages = await prisma.directMessage.findMany()
    * ```
    */
  get directMessage(): Prisma.DirectMessageDelegate<GlobalReject>;

  /**
   * `prisma.messageRoom`: Exposes CRUD operations for the **MessageRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageRooms
    * const messageRooms = await prisma.messageRoom.findMany()
    * ```
    */
  get messageRoom(): Prisma.MessageRoomDelegate<GlobalReject>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<GlobalReject>;

  /**
   * `prisma.invitationfriend`: Exposes CRUD operations for the **Invitationfriend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitationfriends
    * const invitationfriends = await prisma.invitationfriend.findMany()
    * ```
    */
  get invitationfriend(): Prisma.InvitationfriendDelegate<GlobalReject>;

  /**
   * `prisma.userAchiev`: Exposes CRUD operations for the **UserAchiev** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievs
    * const userAchievs = await prisma.userAchiev.findMany()
    * ```
    */
  get userAchiev(): Prisma.UserAchievDelegate<GlobalReject>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<GlobalReject>;

  /**
   * `prisma.match_history`: Exposes CRUD operations for the **match_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Match_histories
    * const match_histories = await prisma.match_history.findMany()
    * ```
    */
  get match_history(): Prisma.match_historyDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Users_room: 'Users_room',
    Room: 'Room',
    DirectMessage: 'DirectMessage',
    MessageRoom: 'MessageRoom',
    Friendship: 'Friendship',
    Invitationfriend: 'Invitationfriend',
    UserAchiev: 'UserAchiev',
    Achievement: 'Achievement',
    match_history: 'match_history'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    users_room: number
    room: number
    directmsg: number
    dm: number
    msg_room: number
    userachiev: number
    invit_friend: number
    invit_fr: number
    friend: number
    friend_rel: number
    match_hist1: number
    match_hist2: number
  }

  export type UserCountOutputTypeSelect = {
    users_room?: boolean
    room?: boolean
    directmsg?: boolean
    dm?: boolean
    msg_room?: boolean
    userachiev?: boolean
    invit_friend?: boolean
    invit_fr?: boolean
    friend?: boolean
    friend_rel?: boolean
    match_hist1?: boolean
    match_hist2?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type RoomCountOutputType
   */


  export type RoomCountOutputType = {
    users_room: number
    msg_room: number
  }

  export type RoomCountOutputTypeSelect = {
    users_room?: boolean
    msg_room?: boolean
  }

  export type RoomCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RoomCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RoomCountOutputType
    : S extends undefined
    ? never
    : S extends RoomCountOutputTypeArgs
    ?'include' extends U
    ? RoomCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RoomCountOutputType ? RoomCountOutputType[P] : never
  } 
    : RoomCountOutputType
  : RoomCountOutputType




  // Custom InputTypes

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     * 
    **/
    select?: RoomCountOutputTypeSelect | null
  }



  /**
   * Count Type AchievementCountOutputType
   */


  export type AchievementCountOutputType = {
    user_achiev: number
  }

  export type AchievementCountOutputTypeSelect = {
    user_achiev?: boolean
  }

  export type AchievementCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AchievementCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AchievementCountOutputType
    : S extends undefined
    ? never
    : S extends AchievementCountOutputTypeArgs
    ?'include' extends U
    ? AchievementCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AchievementCountOutputType ? AchievementCountOutputType[P] : never
  } 
    : AchievementCountOutputType
  : AchievementCountOutputType




  // Custom InputTypes

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     * 
    **/
    select?: AchievementCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    login: string | null
    username: string | null
    avatar: string | null
    email: string | null
    token_google_auth: string | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    login: string | null
    username: string | null
    avatar: string | null
    email: string | null
    token_google_auth: string | null
    losses: number | null
    wins: number | null
    ladder_level: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number
    username: number
    avatar: number
    email: number
    token_google_auth: number
    losses: number
    wins: number
    ladder_level: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    username?: true
    avatar?: true
    email?: true
    token_google_auth?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    username?: true
    avatar?: true
    email?: true
    token_google_auth?: true
    losses?: true
    wins?: true
    ladder_level?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    username?: true
    avatar?: true
    email?: true
    token_google_auth?: true
    losses?: true
    wins?: true
    ladder_level?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    login: string
    username: string
    avatar: string | null
    email: string | null
    token_google_auth: string | null
    losses: number
    wins: number
    ladder_level: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    login?: boolean
    username?: boolean
    avatar?: boolean
    email?: boolean
    token_google_auth?: boolean
    losses?: boolean
    wins?: boolean
    ladder_level?: boolean
    users_room?: boolean | Users_roomFindManyArgs
    room?: boolean | RoomFindManyArgs
    directmsg?: boolean | DirectMessageFindManyArgs
    dm?: boolean | DirectMessageFindManyArgs
    msg_room?: boolean | MessageRoomFindManyArgs
    userachiev?: boolean | UserAchievFindManyArgs
    invit_friend?: boolean | InvitationfriendFindManyArgs
    invit_fr?: boolean | InvitationfriendFindManyArgs
    friend?: boolean | FriendshipFindManyArgs
    friend_rel?: boolean | FriendshipFindManyArgs
    match_hist1?: boolean | match_historyFindManyArgs
    match_hist2?: boolean | match_historyFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    users_room?: boolean | Users_roomFindManyArgs
    room?: boolean | RoomFindManyArgs
    directmsg?: boolean | DirectMessageFindManyArgs
    dm?: boolean | DirectMessageFindManyArgs
    msg_room?: boolean | MessageRoomFindManyArgs
    userachiev?: boolean | UserAchievFindManyArgs
    invit_friend?: boolean | InvitationfriendFindManyArgs
    invit_fr?: boolean | InvitationfriendFindManyArgs
    friend?: boolean | FriendshipFindManyArgs
    friend_rel?: boolean | FriendshipFindManyArgs
    match_hist1?: boolean | match_historyFindManyArgs
    match_hist2?: boolean | match_historyFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users_room' ? Array < Users_roomGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'room' ? Array < RoomGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'directmsg' ? Array < DirectMessageGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'dm' ? Array < DirectMessageGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'msg_room' ? Array < MessageRoomGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'userachiev' ? Array < UserAchievGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'invit_friend' ? Array < InvitationfriendGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'invit_fr' ? Array < InvitationfriendGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'friend' ? Array < FriendshipGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'friend_rel' ? Array < FriendshipGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'match_hist1' ? Array < match_historyGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'match_hist2' ? Array < match_historyGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users_room' ? Array < Users_roomGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'room' ? Array < RoomGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'directmsg' ? Array < DirectMessageGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'dm' ? Array < DirectMessageGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'msg_room' ? Array < MessageRoomGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'userachiev' ? Array < UserAchievGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'invit_friend' ? Array < InvitationfriendGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'invit_fr' ? Array < InvitationfriendGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'friend' ? Array < FriendshipGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'friend_rel' ? Array < FriendshipGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'match_hist1' ? Array < match_historyGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'match_hist2' ? Array < match_historyGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users_room<T extends Users_roomFindManyArgs = {}>(args?: Subset<T, Users_roomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Users_room>>, PrismaPromise<Array<Users_roomGetPayload<T>>>>;

    room<T extends RoomFindManyArgs = {}>(args?: Subset<T, RoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Room>>, PrismaPromise<Array<RoomGetPayload<T>>>>;

    directmsg<T extends DirectMessageFindManyArgs = {}>(args?: Subset<T, DirectMessageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DirectMessage>>, PrismaPromise<Array<DirectMessageGetPayload<T>>>>;

    dm<T extends DirectMessageFindManyArgs = {}>(args?: Subset<T, DirectMessageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DirectMessage>>, PrismaPromise<Array<DirectMessageGetPayload<T>>>>;

    msg_room<T extends MessageRoomFindManyArgs = {}>(args?: Subset<T, MessageRoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<MessageRoom>>, PrismaPromise<Array<MessageRoomGetPayload<T>>>>;

    userachiev<T extends UserAchievFindManyArgs = {}>(args?: Subset<T, UserAchievFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserAchiev>>, PrismaPromise<Array<UserAchievGetPayload<T>>>>;

    invit_friend<T extends InvitationfriendFindManyArgs = {}>(args?: Subset<T, InvitationfriendFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invitationfriend>>, PrismaPromise<Array<InvitationfriendGetPayload<T>>>>;

    invit_fr<T extends InvitationfriendFindManyArgs = {}>(args?: Subset<T, InvitationfriendFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invitationfriend>>, PrismaPromise<Array<InvitationfriendGetPayload<T>>>>;

    friend<T extends FriendshipFindManyArgs = {}>(args?: Subset<T, FriendshipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Friendship>>, PrismaPromise<Array<FriendshipGetPayload<T>>>>;

    friend_rel<T extends FriendshipFindManyArgs = {}>(args?: Subset<T, FriendshipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Friendship>>, PrismaPromise<Array<FriendshipGetPayload<T>>>>;

    match_hist1<T extends match_historyFindManyArgs = {}>(args?: Subset<T, match_historyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<match_history>>, PrismaPromise<Array<match_historyGetPayload<T>>>>;

    match_hist2<T extends match_historyFindManyArgs = {}>(args?: Subset<T, match_historyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<match_history>>, PrismaPromise<Array<match_historyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Users_room
   */


  export type AggregateUsers_room = {
    _count: Users_roomCountAggregateOutputType | null
    _avg: Users_roomAvgAggregateOutputType | null
    _sum: Users_roomSumAggregateOutputType | null
    _min: Users_roomMinAggregateOutputType | null
    _max: Users_roomMaxAggregateOutputType | null
  }

  export type Users_roomAvgAggregateOutputType = {
    id: number | null
  }

  export type Users_roomSumAggregateOutputType = {
    id: number | null
  }

  export type Users_roomMinAggregateOutputType = {
    id: number | null
    username: string | null
    user_role: string | null
    room_name: string | null
    state_user: string | null
  }

  export type Users_roomMaxAggregateOutputType = {
    id: number | null
    username: string | null
    user_role: string | null
    room_name: string | null
    state_user: string | null
  }

  export type Users_roomCountAggregateOutputType = {
    id: number
    username: number
    user_role: number
    room_name: number
    state_user: number
    _all: number
  }


  export type Users_roomAvgAggregateInputType = {
    id?: true
  }

  export type Users_roomSumAggregateInputType = {
    id?: true
  }

  export type Users_roomMinAggregateInputType = {
    id?: true
    username?: true
    user_role?: true
    room_name?: true
    state_user?: true
  }

  export type Users_roomMaxAggregateInputType = {
    id?: true
    username?: true
    user_role?: true
    room_name?: true
    state_user?: true
  }

  export type Users_roomCountAggregateInputType = {
    id?: true
    username?: true
    user_role?: true
    room_name?: true
    state_user?: true
    _all?: true
  }

  export type Users_roomAggregateArgs = {
    /**
     * Filter which Users_room to aggregate.
     * 
    **/
    where?: Users_roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users_rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<Users_roomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Users_roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users_rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users_rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users_rooms
    **/
    _count?: true | Users_roomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_roomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_roomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_roomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_roomMaxAggregateInputType
  }

  export type GetUsers_roomAggregateType<T extends Users_roomAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_room]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_room[P]>
      : GetScalarType<T[P], AggregateUsers_room[P]>
  }




  export type Users_roomGroupByArgs = {
    where?: Users_roomWhereInput
    orderBy?: Enumerable<Users_roomOrderByWithAggregationInput>
    by: Array<Users_roomScalarFieldEnum>
    having?: Users_roomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_roomCountAggregateInputType | true
    _avg?: Users_roomAvgAggregateInputType
    _sum?: Users_roomSumAggregateInputType
    _min?: Users_roomMinAggregateInputType
    _max?: Users_roomMaxAggregateInputType
  }


  export type Users_roomGroupByOutputType = {
    id: number
    username: string
    user_role: string
    room_name: string
    state_user: string
    _count: Users_roomCountAggregateOutputType | null
    _avg: Users_roomAvgAggregateOutputType | null
    _sum: Users_roomSumAggregateOutputType | null
    _min: Users_roomMinAggregateOutputType | null
    _max: Users_roomMaxAggregateOutputType | null
  }

  type GetUsers_roomGroupByPayload<T extends Users_roomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Users_roomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_roomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_roomGroupByOutputType[P]>
            : GetScalarType<T[P], Users_roomGroupByOutputType[P]>
        }
      >
    >


  export type Users_roomSelect = {
    id?: boolean
    username?: boolean
    user?: boolean | UserArgs
    user_role?: boolean
    room_name?: boolean
    room?: boolean | RoomArgs
    state_user?: boolean
  }

  export type Users_roomInclude = {
    user?: boolean | UserArgs
    room?: boolean | RoomArgs
  }

  export type Users_roomGetPayload<
    S extends boolean | null | undefined | Users_roomArgs,
    U = keyof S
      > = S extends true
        ? Users_room
    : S extends undefined
    ? never
    : S extends Users_roomArgs | Users_roomFindManyArgs
    ?'include' extends U
    ? Users_room  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'room' ? RoomGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'room' ? RoomGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Users_room ? Users_room[P] : never
  } 
    : Users_room
  : Users_room


  type Users_roomCountArgs = Merge<
    Omit<Users_roomFindManyArgs, 'select' | 'include'> & {
      select?: Users_roomCountAggregateInputType | true
    }
  >

  export interface Users_roomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users_room that matches the filter.
     * @param {Users_roomFindUniqueArgs} args - Arguments to find a Users_room
     * @example
     * // Get one Users_room
     * const users_room = await prisma.users_room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Users_roomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Users_roomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users_room'> extends True ? CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>> : CheckSelect<T, Prisma__Users_roomClient<Users_room | null >, Prisma__Users_roomClient<Users_roomGetPayload<T> | null >>

    /**
     * Find the first Users_room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomFindFirstArgs} args - Arguments to find a Users_room
     * @example
     * // Get one Users_room
     * const users_room = await prisma.users_room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Users_roomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Users_roomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users_room'> extends True ? CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>> : CheckSelect<T, Prisma__Users_roomClient<Users_room | null >, Prisma__Users_roomClient<Users_roomGetPayload<T> | null >>

    /**
     * Find zero or more Users_rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_rooms
     * const users_rooms = await prisma.users_room.findMany()
     * 
     * // Get first 10 Users_rooms
     * const users_rooms = await prisma.users_room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const users_roomWithIdOnly = await prisma.users_room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Users_roomFindManyArgs>(
      args?: SelectSubset<T, Users_roomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users_room>>, PrismaPromise<Array<Users_roomGetPayload<T>>>>

    /**
     * Create a Users_room.
     * @param {Users_roomCreateArgs} args - Arguments to create a Users_room.
     * @example
     * // Create one Users_room
     * const Users_room = await prisma.users_room.create({
     *   data: {
     *     // ... data to create a Users_room
     *   }
     * })
     * 
    **/
    create<T extends Users_roomCreateArgs>(
      args: SelectSubset<T, Users_roomCreateArgs>
    ): CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>>

    /**
     * Create many Users_rooms.
     *     @param {Users_roomCreateManyArgs} args - Arguments to create many Users_rooms.
     *     @example
     *     // Create many Users_rooms
     *     const users_room = await prisma.users_room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Users_roomCreateManyArgs>(
      args?: SelectSubset<T, Users_roomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users_room.
     * @param {Users_roomDeleteArgs} args - Arguments to delete one Users_room.
     * @example
     * // Delete one Users_room
     * const Users_room = await prisma.users_room.delete({
     *   where: {
     *     // ... filter to delete one Users_room
     *   }
     * })
     * 
    **/
    delete<T extends Users_roomDeleteArgs>(
      args: SelectSubset<T, Users_roomDeleteArgs>
    ): CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>>

    /**
     * Update one Users_room.
     * @param {Users_roomUpdateArgs} args - Arguments to update one Users_room.
     * @example
     * // Update one Users_room
     * const users_room = await prisma.users_room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Users_roomUpdateArgs>(
      args: SelectSubset<T, Users_roomUpdateArgs>
    ): CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>>

    /**
     * Delete zero or more Users_rooms.
     * @param {Users_roomDeleteManyArgs} args - Arguments to filter Users_rooms to delete.
     * @example
     * // Delete a few Users_rooms
     * const { count } = await prisma.users_room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Users_roomDeleteManyArgs>(
      args?: SelectSubset<T, Users_roomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_rooms
     * const users_room = await prisma.users_room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Users_roomUpdateManyArgs>(
      args: SelectSubset<T, Users_roomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_room.
     * @param {Users_roomUpsertArgs} args - Arguments to update or create a Users_room.
     * @example
     * // Update or create a Users_room
     * const users_room = await prisma.users_room.upsert({
     *   create: {
     *     // ... data to create a Users_room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_room we want to update
     *   }
     * })
    **/
    upsert<T extends Users_roomUpsertArgs>(
      args: SelectSubset<T, Users_roomUpsertArgs>
    ): CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>>

    /**
     * Find one Users_room that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {Users_roomFindUniqueOrThrowArgs} args - Arguments to find a Users_room
     * @example
     * // Get one Users_room
     * const users_room = await prisma.users_room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Users_roomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Users_roomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>>

    /**
     * Find the first Users_room that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomFindFirstOrThrowArgs} args - Arguments to find a Users_room
     * @example
     * // Get one Users_room
     * const users_room = await prisma.users_room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Users_roomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Users_roomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__Users_roomClient<Users_room>, Prisma__Users_roomClient<Users_roomGetPayload<T>>>

    /**
     * Count the number of Users_rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomCountArgs} args - Arguments to filter Users_rooms to count.
     * @example
     * // Count the number of Users_rooms
     * const count = await prisma.users_room.count({
     *   where: {
     *     // ... the filter for the Users_rooms we want to count
     *   }
     * })
    **/
    count<T extends Users_roomCountArgs>(
      args?: Subset<T, Users_roomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_roomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_roomAggregateArgs>(args: Subset<T, Users_roomAggregateArgs>): PrismaPromise<GetUsers_roomAggregateType<T>>

    /**
     * Group by Users_room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_roomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Users_roomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Users_roomGroupByArgs['orderBy'] }
        : { orderBy?: Users_roomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Users_roomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_roomGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users_room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Users_roomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users_room base type for findUnique actions
   */
  export type Users_roomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * Filter, which Users_room to fetch.
     * 
    **/
    where: Users_roomWhereUniqueInput
  }

  /**
   * Users_room: findUnique
   */
  export interface Users_roomFindUniqueArgs extends Users_roomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users_room base type for findFirst actions
   */
  export type Users_roomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * Filter, which Users_room to fetch.
     * 
    **/
    where?: Users_roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users_rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<Users_roomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users_rooms.
     * 
    **/
    cursor?: Users_roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users_rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users_rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users_rooms.
     * 
    **/
    distinct?: Enumerable<Users_roomScalarFieldEnum>
  }

  /**
   * Users_room: findFirst
   */
  export interface Users_roomFindFirstArgs extends Users_roomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users_room findMany
   */
  export type Users_roomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * Filter, which Users_rooms to fetch.
     * 
    **/
    where?: Users_roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users_rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<Users_roomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users_rooms.
     * 
    **/
    cursor?: Users_roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users_rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users_rooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Users_roomScalarFieldEnum>
  }


  /**
   * Users_room create
   */
  export type Users_roomCreateArgs = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * The data needed to create a Users_room.
     * 
    **/
    data: XOR<Users_roomCreateInput, Users_roomUncheckedCreateInput>
  }


  /**
   * Users_room createMany
   */
  export type Users_roomCreateManyArgs = {
    /**
     * The data used to create many Users_rooms.
     * 
    **/
    data: Enumerable<Users_roomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users_room update
   */
  export type Users_roomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * The data needed to update a Users_room.
     * 
    **/
    data: XOR<Users_roomUpdateInput, Users_roomUncheckedUpdateInput>
    /**
     * Choose, which Users_room to update.
     * 
    **/
    where: Users_roomWhereUniqueInput
  }


  /**
   * Users_room updateMany
   */
  export type Users_roomUpdateManyArgs = {
    /**
     * The data used to update Users_rooms.
     * 
    **/
    data: XOR<Users_roomUpdateManyMutationInput, Users_roomUncheckedUpdateManyInput>
    /**
     * Filter which Users_rooms to update
     * 
    **/
    where?: Users_roomWhereInput
  }


  /**
   * Users_room upsert
   */
  export type Users_roomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * The filter to search for the Users_room to update in case it exists.
     * 
    **/
    where: Users_roomWhereUniqueInput
    /**
     * In case the Users_room found by the `where` argument doesn't exist, create a new Users_room with this data.
     * 
    **/
    create: XOR<Users_roomCreateInput, Users_roomUncheckedCreateInput>
    /**
     * In case the Users_room was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Users_roomUpdateInput, Users_roomUncheckedUpdateInput>
  }


  /**
   * Users_room delete
   */
  export type Users_roomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
    /**
     * Filter which Users_room to delete.
     * 
    **/
    where: Users_roomWhereUniqueInput
  }


  /**
   * Users_room deleteMany
   */
  export type Users_roomDeleteManyArgs = {
    /**
     * Filter which Users_rooms to delete
     * 
    **/
    where?: Users_roomWhereInput
  }


  /**
   * Users_room: findUniqueOrThrow
   */
  export type Users_roomFindUniqueOrThrowArgs = Users_roomFindUniqueArgsBase
      

  /**
   * Users_room: findFirstOrThrow
   */
  export type Users_roomFindFirstOrThrowArgs = Users_roomFindFirstArgsBase
      

  /**
   * Users_room without action
   */
  export type Users_roomArgs = {
    /**
     * Select specific fields to fetch from the Users_room
     * 
    **/
    select?: Users_roomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Users_roomInclude | null
  }



  /**
   * Model Room
   */


  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    password: string | null
    owner: string | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    password: string | null
    owner: string | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    name: number
    type: number
    password: number
    owner: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    password?: true
    owner?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    password?: true
    owner?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    password?: true
    owner?: true
    _all?: true
  }

  export type RoomAggregateArgs = {
    /**
     * Filter which Room to aggregate.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs = {
    where?: RoomWhereInput
    orderBy?: Enumerable<RoomOrderByWithAggregationInput>
    by: Array<RoomScalarFieldEnum>
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }


  export type RoomGroupByOutputType = {
    id: number
    name: string
    type: string
    password: string | null
    owner: string
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    password?: boolean
    owner?: boolean
    user?: boolean | UserArgs
    users_room?: boolean | Users_roomFindManyArgs
    msg_room?: boolean | MessageRoomFindManyArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomInclude = {
    user?: boolean | UserArgs
    users_room?: boolean | Users_roomFindManyArgs
    msg_room?: boolean | MessageRoomFindManyArgs
    _count?: boolean | RoomCountOutputTypeArgs
  }

  export type RoomGetPayload<
    S extends boolean | null | undefined | RoomArgs,
    U = keyof S
      > = S extends true
        ? Room
    : S extends undefined
    ? never
    : S extends RoomArgs | RoomFindManyArgs
    ?'include' extends U
    ? Room  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'users_room' ? Array < Users_roomGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'msg_room' ? Array < MessageRoomGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users_room' ? Array < Users_roomGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'msg_room' ? Array < MessageRoomGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? RoomCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Room ? Room[P] : never
  } 
    : Room
  : Room


  type RoomCountArgs = Merge<
    Omit<RoomFindManyArgs, 'select' | 'include'> & {
      select?: RoomCountAggregateInputType | true
    }
  >

  export interface RoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Room'> extends True ? CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>> : CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Room'> extends True ? CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>> : CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs>(
      args?: SelectSubset<T, RoomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Room>>, PrismaPromise<Array<RoomGetPayload<T>>>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs>(
      args: SelectSubset<T, RoomCreateArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs>(
      args?: SelectSubset<T, RoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs>(
      args: SelectSubset<T, RoomDeleteArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs>(
      args: SelectSubset<T, RoomUpdateArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs>(
      args?: SelectSubset<T, RoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs>(
      args: SelectSubset<T, RoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs>(
      args: SelectSubset<T, RoomUpsertArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Find one Room that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Find the first Room that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__RoomClient<Room>, Prisma__RoomClient<RoomGetPayload<T>>>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    users_room<T extends Users_roomFindManyArgs = {}>(args?: Subset<T, Users_roomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Users_room>>, PrismaPromise<Array<Users_roomGetPayload<T>>>>;

    msg_room<T extends MessageRoomFindManyArgs = {}>(args?: Subset<T, MessageRoomFindManyArgs>): CheckSelect<T, PrismaPromise<Array<MessageRoom>>, PrismaPromise<Array<MessageRoomGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Room base type for findUnique actions
   */
  export type RoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where: RoomWhereUniqueInput
  }

  /**
   * Room: findUnique
   */
  export interface RoomFindUniqueArgs extends RoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room base type for findFirst actions
   */
  export type RoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     * 
    **/
    distinct?: Enumerable<RoomScalarFieldEnum>
  }

  /**
   * Room: findFirst
   */
  export interface RoomFindFirstArgs extends RoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findMany
   */
  export type RoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter, which Rooms to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room create
   */
  export type RoomCreateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The data needed to create a Room.
     * 
    **/
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs = {
    /**
     * The data used to create many Rooms.
     * 
    **/
    data: Enumerable<RoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The data needed to update a Room.
     * 
    **/
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs = {
    /**
     * The data used to update Rooms.
     * 
    **/
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * The filter to search for the Room to update in case it exists.
     * 
    **/
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     * 
    **/
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
    /**
     * Filter which Room to delete.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs = {
    /**
     * Filter which Rooms to delete
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room: findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs = RoomFindUniqueArgsBase
      

  /**
   * Room: findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs = RoomFindFirstArgsBase
      

  /**
   * Room without action
   */
  export type RoomArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomInclude | null
  }



  /**
   * Model DirectMessage
   */


  export type AggregateDirectMessage = {
    _count: DirectMessageCountAggregateOutputType | null
    _avg: DirectMessageAvgAggregateOutputType | null
    _sum: DirectMessageSumAggregateOutputType | null
    _min: DirectMessageMinAggregateOutputType | null
    _max: DirectMessageMaxAggregateOutputType | null
  }

  export type DirectMessageAvgAggregateOutputType = {
    id: number | null
  }

  export type DirectMessageSumAggregateOutputType = {
    id: number | null
  }

  export type DirectMessageMinAggregateOutputType = {
    id: number | null
    creationDate: Date | null
    from: string | null
    to: string | null
    content_msg: string | null
  }

  export type DirectMessageMaxAggregateOutputType = {
    id: number | null
    creationDate: Date | null
    from: string | null
    to: string | null
    content_msg: string | null
  }

  export type DirectMessageCountAggregateOutputType = {
    id: number
    creationDate: number
    from: number
    to: number
    content_msg: number
    _all: number
  }


  export type DirectMessageAvgAggregateInputType = {
    id?: true
  }

  export type DirectMessageSumAggregateInputType = {
    id?: true
  }

  export type DirectMessageMinAggregateInputType = {
    id?: true
    creationDate?: true
    from?: true
    to?: true
    content_msg?: true
  }

  export type DirectMessageMaxAggregateInputType = {
    id?: true
    creationDate?: true
    from?: true
    to?: true
    content_msg?: true
  }

  export type DirectMessageCountAggregateInputType = {
    id?: true
    creationDate?: true
    from?: true
    to?: true
    content_msg?: true
    _all?: true
  }

  export type DirectMessageAggregateArgs = {
    /**
     * Filter which DirectMessage to aggregate.
     * 
    **/
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     * 
    **/
    orderBy?: Enumerable<DirectMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DirectMessages
    **/
    _count?: true | DirectMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DirectMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DirectMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DirectMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DirectMessageMaxAggregateInputType
  }

  export type GetDirectMessageAggregateType<T extends DirectMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateDirectMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirectMessage[P]>
      : GetScalarType<T[P], AggregateDirectMessage[P]>
  }




  export type DirectMessageGroupByArgs = {
    where?: DirectMessageWhereInput
    orderBy?: Enumerable<DirectMessageOrderByWithAggregationInput>
    by: Array<DirectMessageScalarFieldEnum>
    having?: DirectMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DirectMessageCountAggregateInputType | true
    _avg?: DirectMessageAvgAggregateInputType
    _sum?: DirectMessageSumAggregateInputType
    _min?: DirectMessageMinAggregateInputType
    _max?: DirectMessageMaxAggregateInputType
  }


  export type DirectMessageGroupByOutputType = {
    id: number
    creationDate: Date
    from: string
    to: string
    content_msg: string
    _count: DirectMessageCountAggregateOutputType | null
    _avg: DirectMessageAvgAggregateOutputType | null
    _sum: DirectMessageSumAggregateOutputType | null
    _min: DirectMessageMinAggregateOutputType | null
    _max: DirectMessageMaxAggregateOutputType | null
  }

  type GetDirectMessageGroupByPayload<T extends DirectMessageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DirectMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DirectMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DirectMessageGroupByOutputType[P]>
            : GetScalarType<T[P], DirectMessageGroupByOutputType[P]>
        }
      >
    >


  export type DirectMessageSelect = {
    id?: boolean
    creationDate?: boolean
    from?: boolean
    user1?: boolean | UserArgs
    to?: boolean
    user2?: boolean | UserArgs
    content_msg?: boolean
  }

  export type DirectMessageInclude = {
    user1?: boolean | UserArgs
    user2?: boolean | UserArgs
  }

  export type DirectMessageGetPayload<
    S extends boolean | null | undefined | DirectMessageArgs,
    U = keyof S
      > = S extends true
        ? DirectMessage
    : S extends undefined
    ? never
    : S extends DirectMessageArgs | DirectMessageFindManyArgs
    ?'include' extends U
    ? DirectMessage  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof DirectMessage ? DirectMessage[P] : never
  } 
    : DirectMessage
  : DirectMessage


  type DirectMessageCountArgs = Merge<
    Omit<DirectMessageFindManyArgs, 'select' | 'include'> & {
      select?: DirectMessageCountAggregateInputType | true
    }
  >

  export interface DirectMessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one DirectMessage that matches the filter.
     * @param {DirectMessageFindUniqueArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DirectMessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DirectMessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DirectMessage'> extends True ? CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>> : CheckSelect<T, Prisma__DirectMessageClient<DirectMessage | null >, Prisma__DirectMessageClient<DirectMessageGetPayload<T> | null >>

    /**
     * Find the first DirectMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageFindFirstArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DirectMessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DirectMessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DirectMessage'> extends True ? CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>> : CheckSelect<T, Prisma__DirectMessageClient<DirectMessage | null >, Prisma__DirectMessageClient<DirectMessageGetPayload<T> | null >>

    /**
     * Find zero or more DirectMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DirectMessages
     * const directMessages = await prisma.directMessage.findMany()
     * 
     * // Get first 10 DirectMessages
     * const directMessages = await prisma.directMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directMessageWithIdOnly = await prisma.directMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DirectMessageFindManyArgs>(
      args?: SelectSubset<T, DirectMessageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DirectMessage>>, PrismaPromise<Array<DirectMessageGetPayload<T>>>>

    /**
     * Create a DirectMessage.
     * @param {DirectMessageCreateArgs} args - Arguments to create a DirectMessage.
     * @example
     * // Create one DirectMessage
     * const DirectMessage = await prisma.directMessage.create({
     *   data: {
     *     // ... data to create a DirectMessage
     *   }
     * })
     * 
    **/
    create<T extends DirectMessageCreateArgs>(
      args: SelectSubset<T, DirectMessageCreateArgs>
    ): CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>>

    /**
     * Create many DirectMessages.
     *     @param {DirectMessageCreateManyArgs} args - Arguments to create many DirectMessages.
     *     @example
     *     // Create many DirectMessages
     *     const directMessage = await prisma.directMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DirectMessageCreateManyArgs>(
      args?: SelectSubset<T, DirectMessageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DirectMessage.
     * @param {DirectMessageDeleteArgs} args - Arguments to delete one DirectMessage.
     * @example
     * // Delete one DirectMessage
     * const DirectMessage = await prisma.directMessage.delete({
     *   where: {
     *     // ... filter to delete one DirectMessage
     *   }
     * })
     * 
    **/
    delete<T extends DirectMessageDeleteArgs>(
      args: SelectSubset<T, DirectMessageDeleteArgs>
    ): CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>>

    /**
     * Update one DirectMessage.
     * @param {DirectMessageUpdateArgs} args - Arguments to update one DirectMessage.
     * @example
     * // Update one DirectMessage
     * const directMessage = await prisma.directMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DirectMessageUpdateArgs>(
      args: SelectSubset<T, DirectMessageUpdateArgs>
    ): CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>>

    /**
     * Delete zero or more DirectMessages.
     * @param {DirectMessageDeleteManyArgs} args - Arguments to filter DirectMessages to delete.
     * @example
     * // Delete a few DirectMessages
     * const { count } = await prisma.directMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DirectMessageDeleteManyArgs>(
      args?: SelectSubset<T, DirectMessageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DirectMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DirectMessages
     * const directMessage = await prisma.directMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DirectMessageUpdateManyArgs>(
      args: SelectSubset<T, DirectMessageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DirectMessage.
     * @param {DirectMessageUpsertArgs} args - Arguments to update or create a DirectMessage.
     * @example
     * // Update or create a DirectMessage
     * const directMessage = await prisma.directMessage.upsert({
     *   create: {
     *     // ... data to create a DirectMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DirectMessage we want to update
     *   }
     * })
    **/
    upsert<T extends DirectMessageUpsertArgs>(
      args: SelectSubset<T, DirectMessageUpsertArgs>
    ): CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>>

    /**
     * Find one DirectMessage that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DirectMessageFindUniqueOrThrowArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DirectMessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DirectMessageFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>>

    /**
     * Find the first DirectMessage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageFindFirstOrThrowArgs} args - Arguments to find a DirectMessage
     * @example
     * // Get one DirectMessage
     * const directMessage = await prisma.directMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DirectMessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DirectMessageFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DirectMessageClient<DirectMessage>, Prisma__DirectMessageClient<DirectMessageGetPayload<T>>>

    /**
     * Count the number of DirectMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageCountArgs} args - Arguments to filter DirectMessages to count.
     * @example
     * // Count the number of DirectMessages
     * const count = await prisma.directMessage.count({
     *   where: {
     *     // ... the filter for the DirectMessages we want to count
     *   }
     * })
    **/
    count<T extends DirectMessageCountArgs>(
      args?: Subset<T, DirectMessageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DirectMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectMessageAggregateArgs>(args: Subset<T, DirectMessageAggregateArgs>): PrismaPromise<GetDirectMessageAggregateType<T>>

    /**
     * Group by DirectMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DirectMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DirectMessageGroupByArgs['orderBy'] }
        : { orderBy?: DirectMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DirectMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirectMessageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DirectMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DirectMessageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    user2<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DirectMessage base type for findUnique actions
   */
  export type DirectMessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * Filter, which DirectMessage to fetch.
     * 
    **/
    where: DirectMessageWhereUniqueInput
  }

  /**
   * DirectMessage: findUnique
   */
  export interface DirectMessageFindUniqueArgs extends DirectMessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DirectMessage base type for findFirst actions
   */
  export type DirectMessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * Filter, which DirectMessage to fetch.
     * 
    **/
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     * 
    **/
    orderBy?: Enumerable<DirectMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMessages.
     * 
    **/
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMessages.
     * 
    **/
    distinct?: Enumerable<DirectMessageScalarFieldEnum>
  }

  /**
   * DirectMessage: findFirst
   */
  export interface DirectMessageFindFirstArgs extends DirectMessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DirectMessage findMany
   */
  export type DirectMessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * Filter, which DirectMessages to fetch.
     * 
    **/
    where?: DirectMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMessages to fetch.
     * 
    **/
    orderBy?: Enumerable<DirectMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DirectMessages.
     * 
    **/
    cursor?: DirectMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMessages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMessages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DirectMessageScalarFieldEnum>
  }


  /**
   * DirectMessage create
   */
  export type DirectMessageCreateArgs = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * The data needed to create a DirectMessage.
     * 
    **/
    data: XOR<DirectMessageCreateInput, DirectMessageUncheckedCreateInput>
  }


  /**
   * DirectMessage createMany
   */
  export type DirectMessageCreateManyArgs = {
    /**
     * The data used to create many DirectMessages.
     * 
    **/
    data: Enumerable<DirectMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DirectMessage update
   */
  export type DirectMessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * The data needed to update a DirectMessage.
     * 
    **/
    data: XOR<DirectMessageUpdateInput, DirectMessageUncheckedUpdateInput>
    /**
     * Choose, which DirectMessage to update.
     * 
    **/
    where: DirectMessageWhereUniqueInput
  }


  /**
   * DirectMessage updateMany
   */
  export type DirectMessageUpdateManyArgs = {
    /**
     * The data used to update DirectMessages.
     * 
    **/
    data: XOR<DirectMessageUpdateManyMutationInput, DirectMessageUncheckedUpdateManyInput>
    /**
     * Filter which DirectMessages to update
     * 
    **/
    where?: DirectMessageWhereInput
  }


  /**
   * DirectMessage upsert
   */
  export type DirectMessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * The filter to search for the DirectMessage to update in case it exists.
     * 
    **/
    where: DirectMessageWhereUniqueInput
    /**
     * In case the DirectMessage found by the `where` argument doesn't exist, create a new DirectMessage with this data.
     * 
    **/
    create: XOR<DirectMessageCreateInput, DirectMessageUncheckedCreateInput>
    /**
     * In case the DirectMessage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DirectMessageUpdateInput, DirectMessageUncheckedUpdateInput>
  }


  /**
   * DirectMessage delete
   */
  export type DirectMessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
    /**
     * Filter which DirectMessage to delete.
     * 
    **/
    where: DirectMessageWhereUniqueInput
  }


  /**
   * DirectMessage deleteMany
   */
  export type DirectMessageDeleteManyArgs = {
    /**
     * Filter which DirectMessages to delete
     * 
    **/
    where?: DirectMessageWhereInput
  }


  /**
   * DirectMessage: findUniqueOrThrow
   */
  export type DirectMessageFindUniqueOrThrowArgs = DirectMessageFindUniqueArgsBase
      

  /**
   * DirectMessage: findFirstOrThrow
   */
  export type DirectMessageFindFirstOrThrowArgs = DirectMessageFindFirstArgsBase
      

  /**
   * DirectMessage without action
   */
  export type DirectMessageArgs = {
    /**
     * Select specific fields to fetch from the DirectMessage
     * 
    **/
    select?: DirectMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DirectMessageInclude | null
  }



  /**
   * Model MessageRoom
   */


  export type AggregateMessageRoom = {
    _count: MessageRoomCountAggregateOutputType | null
    _avg: MessageRoomAvgAggregateOutputType | null
    _sum: MessageRoomSumAggregateOutputType | null
    _min: MessageRoomMinAggregateOutputType | null
    _max: MessageRoomMaxAggregateOutputType | null
  }

  export type MessageRoomAvgAggregateOutputType = {
    id: number | null
  }

  export type MessageRoomSumAggregateOutputType = {
    id: number | null
  }

  export type MessageRoomMinAggregateOutputType = {
    id: number | null
    creationDate: Date | null
    from: string | null
    room_name: string | null
    content_msg: string | null
  }

  export type MessageRoomMaxAggregateOutputType = {
    id: number | null
    creationDate: Date | null
    from: string | null
    room_name: string | null
    content_msg: string | null
  }

  export type MessageRoomCountAggregateOutputType = {
    id: number
    creationDate: number
    from: number
    room_name: number
    content_msg: number
    _all: number
  }


  export type MessageRoomAvgAggregateInputType = {
    id?: true
  }

  export type MessageRoomSumAggregateInputType = {
    id?: true
  }

  export type MessageRoomMinAggregateInputType = {
    id?: true
    creationDate?: true
    from?: true
    room_name?: true
    content_msg?: true
  }

  export type MessageRoomMaxAggregateInputType = {
    id?: true
    creationDate?: true
    from?: true
    room_name?: true
    content_msg?: true
  }

  export type MessageRoomCountAggregateInputType = {
    id?: true
    creationDate?: true
    from?: true
    room_name?: true
    content_msg?: true
    _all?: true
  }

  export type MessageRoomAggregateArgs = {
    /**
     * Filter which MessageRoom to aggregate.
     * 
    **/
    where?: MessageRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<MessageRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MessageRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageRooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageRooms
    **/
    _count?: true | MessageRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageRoomMaxAggregateInputType
  }

  export type GetMessageRoomAggregateType<T extends MessageRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageRoom[P]>
      : GetScalarType<T[P], AggregateMessageRoom[P]>
  }




  export type MessageRoomGroupByArgs = {
    where?: MessageRoomWhereInput
    orderBy?: Enumerable<MessageRoomOrderByWithAggregationInput>
    by: Array<MessageRoomScalarFieldEnum>
    having?: MessageRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageRoomCountAggregateInputType | true
    _avg?: MessageRoomAvgAggregateInputType
    _sum?: MessageRoomSumAggregateInputType
    _min?: MessageRoomMinAggregateInputType
    _max?: MessageRoomMaxAggregateInputType
  }


  export type MessageRoomGroupByOutputType = {
    id: number
    creationDate: Date
    from: string
    room_name: string
    content_msg: string
    _count: MessageRoomCountAggregateOutputType | null
    _avg: MessageRoomAvgAggregateOutputType | null
    _sum: MessageRoomSumAggregateOutputType | null
    _min: MessageRoomMinAggregateOutputType | null
    _max: MessageRoomMaxAggregateOutputType | null
  }

  type GetMessageRoomGroupByPayload<T extends MessageRoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MessageRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageRoomGroupByOutputType[P]>
            : GetScalarType<T[P], MessageRoomGroupByOutputType[P]>
        }
      >
    >


  export type MessageRoomSelect = {
    id?: boolean
    creationDate?: boolean
    from?: boolean
    user?: boolean | UserArgs
    room_name?: boolean
    room?: boolean | RoomArgs
    content_msg?: boolean
  }

  export type MessageRoomInclude = {
    user?: boolean | UserArgs
    room?: boolean | RoomArgs
  }

  export type MessageRoomGetPayload<
    S extends boolean | null | undefined | MessageRoomArgs,
    U = keyof S
      > = S extends true
        ? MessageRoom
    : S extends undefined
    ? never
    : S extends MessageRoomArgs | MessageRoomFindManyArgs
    ?'include' extends U
    ? MessageRoom  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'room' ? RoomGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'room' ? RoomGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof MessageRoom ? MessageRoom[P] : never
  } 
    : MessageRoom
  : MessageRoom


  type MessageRoomCountArgs = Merge<
    Omit<MessageRoomFindManyArgs, 'select' | 'include'> & {
      select?: MessageRoomCountAggregateInputType | true
    }
  >

  export interface MessageRoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one MessageRoom that matches the filter.
     * @param {MessageRoomFindUniqueArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageRoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageRoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MessageRoom'> extends True ? CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>> : CheckSelect<T, Prisma__MessageRoomClient<MessageRoom | null >, Prisma__MessageRoomClient<MessageRoomGetPayload<T> | null >>

    /**
     * Find the first MessageRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomFindFirstArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageRoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageRoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MessageRoom'> extends True ? CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>> : CheckSelect<T, Prisma__MessageRoomClient<MessageRoom | null >, Prisma__MessageRoomClient<MessageRoomGetPayload<T> | null >>

    /**
     * Find zero or more MessageRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageRooms
     * const messageRooms = await prisma.messageRoom.findMany()
     * 
     * // Get first 10 MessageRooms
     * const messageRooms = await prisma.messageRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageRoomWithIdOnly = await prisma.messageRoom.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageRoomFindManyArgs>(
      args?: SelectSubset<T, MessageRoomFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<MessageRoom>>, PrismaPromise<Array<MessageRoomGetPayload<T>>>>

    /**
     * Create a MessageRoom.
     * @param {MessageRoomCreateArgs} args - Arguments to create a MessageRoom.
     * @example
     * // Create one MessageRoom
     * const MessageRoom = await prisma.messageRoom.create({
     *   data: {
     *     // ... data to create a MessageRoom
     *   }
     * })
     * 
    **/
    create<T extends MessageRoomCreateArgs>(
      args: SelectSubset<T, MessageRoomCreateArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Create many MessageRooms.
     *     @param {MessageRoomCreateManyArgs} args - Arguments to create many MessageRooms.
     *     @example
     *     // Create many MessageRooms
     *     const messageRoom = await prisma.messageRoom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageRoomCreateManyArgs>(
      args?: SelectSubset<T, MessageRoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a MessageRoom.
     * @param {MessageRoomDeleteArgs} args - Arguments to delete one MessageRoom.
     * @example
     * // Delete one MessageRoom
     * const MessageRoom = await prisma.messageRoom.delete({
     *   where: {
     *     // ... filter to delete one MessageRoom
     *   }
     * })
     * 
    **/
    delete<T extends MessageRoomDeleteArgs>(
      args: SelectSubset<T, MessageRoomDeleteArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Update one MessageRoom.
     * @param {MessageRoomUpdateArgs} args - Arguments to update one MessageRoom.
     * @example
     * // Update one MessageRoom
     * const messageRoom = await prisma.messageRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageRoomUpdateArgs>(
      args: SelectSubset<T, MessageRoomUpdateArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Delete zero or more MessageRooms.
     * @param {MessageRoomDeleteManyArgs} args - Arguments to filter MessageRooms to delete.
     * @example
     * // Delete a few MessageRooms
     * const { count } = await prisma.messageRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageRoomDeleteManyArgs>(
      args?: SelectSubset<T, MessageRoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageRooms
     * const messageRoom = await prisma.messageRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageRoomUpdateManyArgs>(
      args: SelectSubset<T, MessageRoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one MessageRoom.
     * @param {MessageRoomUpsertArgs} args - Arguments to update or create a MessageRoom.
     * @example
     * // Update or create a MessageRoom
     * const messageRoom = await prisma.messageRoom.upsert({
     *   create: {
     *     // ... data to create a MessageRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageRoom we want to update
     *   }
     * })
    **/
    upsert<T extends MessageRoomUpsertArgs>(
      args: SelectSubset<T, MessageRoomUpsertArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Find one MessageRoom that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MessageRoomFindUniqueOrThrowArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageRoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MessageRoomFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Find the first MessageRoom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomFindFirstOrThrowArgs} args - Arguments to find a MessageRoom
     * @example
     * // Get one MessageRoom
     * const messageRoom = await prisma.messageRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageRoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MessageRoomFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__MessageRoomClient<MessageRoom>, Prisma__MessageRoomClient<MessageRoomGetPayload<T>>>

    /**
     * Count the number of MessageRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomCountArgs} args - Arguments to filter MessageRooms to count.
     * @example
     * // Count the number of MessageRooms
     * const count = await prisma.messageRoom.count({
     *   where: {
     *     // ... the filter for the MessageRooms we want to count
     *   }
     * })
    **/
    count<T extends MessageRoomCountArgs>(
      args?: Subset<T, MessageRoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageRoomAggregateArgs>(args: Subset<T, MessageRoomAggregateArgs>): PrismaPromise<GetMessageRoomAggregateType<T>>

    /**
     * Group by MessageRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageRoomGroupByArgs['orderBy'] }
        : { orderBy?: MessageRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageRoomGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageRoomClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    room<T extends RoomArgs = {}>(args?: Subset<T, RoomArgs>): CheckSelect<T, Prisma__RoomClient<Room | null >, Prisma__RoomClient<RoomGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MessageRoom base type for findUnique actions
   */
  export type MessageRoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter, which MessageRoom to fetch.
     * 
    **/
    where: MessageRoomWhereUniqueInput
  }

  /**
   * MessageRoom: findUnique
   */
  export interface MessageRoomFindUniqueArgs extends MessageRoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MessageRoom base type for findFirst actions
   */
  export type MessageRoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter, which MessageRoom to fetch.
     * 
    **/
    where?: MessageRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<MessageRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageRooms.
     * 
    **/
    cursor?: MessageRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageRooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageRooms.
     * 
    **/
    distinct?: Enumerable<MessageRoomScalarFieldEnum>
  }

  /**
   * MessageRoom: findFirst
   */
  export interface MessageRoomFindFirstArgs extends MessageRoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MessageRoom findMany
   */
  export type MessageRoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter, which MessageRooms to fetch.
     * 
    **/
    where?: MessageRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageRooms to fetch.
     * 
    **/
    orderBy?: Enumerable<MessageRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageRooms.
     * 
    **/
    cursor?: MessageRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageRooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageRooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MessageRoomScalarFieldEnum>
  }


  /**
   * MessageRoom create
   */
  export type MessageRoomCreateArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * The data needed to create a MessageRoom.
     * 
    **/
    data: XOR<MessageRoomCreateInput, MessageRoomUncheckedCreateInput>
  }


  /**
   * MessageRoom createMany
   */
  export type MessageRoomCreateManyArgs = {
    /**
     * The data used to create many MessageRooms.
     * 
    **/
    data: Enumerable<MessageRoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MessageRoom update
   */
  export type MessageRoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * The data needed to update a MessageRoom.
     * 
    **/
    data: XOR<MessageRoomUpdateInput, MessageRoomUncheckedUpdateInput>
    /**
     * Choose, which MessageRoom to update.
     * 
    **/
    where: MessageRoomWhereUniqueInput
  }


  /**
   * MessageRoom updateMany
   */
  export type MessageRoomUpdateManyArgs = {
    /**
     * The data used to update MessageRooms.
     * 
    **/
    data: XOR<MessageRoomUpdateManyMutationInput, MessageRoomUncheckedUpdateManyInput>
    /**
     * Filter which MessageRooms to update
     * 
    **/
    where?: MessageRoomWhereInput
  }


  /**
   * MessageRoom upsert
   */
  export type MessageRoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * The filter to search for the MessageRoom to update in case it exists.
     * 
    **/
    where: MessageRoomWhereUniqueInput
    /**
     * In case the MessageRoom found by the `where` argument doesn't exist, create a new MessageRoom with this data.
     * 
    **/
    create: XOR<MessageRoomCreateInput, MessageRoomUncheckedCreateInput>
    /**
     * In case the MessageRoom was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MessageRoomUpdateInput, MessageRoomUncheckedUpdateInput>
  }


  /**
   * MessageRoom delete
   */
  export type MessageRoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
    /**
     * Filter which MessageRoom to delete.
     * 
    **/
    where: MessageRoomWhereUniqueInput
  }


  /**
   * MessageRoom deleteMany
   */
  export type MessageRoomDeleteManyArgs = {
    /**
     * Filter which MessageRooms to delete
     * 
    **/
    where?: MessageRoomWhereInput
  }


  /**
   * MessageRoom: findUniqueOrThrow
   */
  export type MessageRoomFindUniqueOrThrowArgs = MessageRoomFindUniqueArgsBase
      

  /**
   * MessageRoom: findFirstOrThrow
   */
  export type MessageRoomFindFirstOrThrowArgs = MessageRoomFindFirstArgsBase
      

  /**
   * MessageRoom without action
   */
  export type MessageRoomArgs = {
    /**
     * Select specific fields to fetch from the MessageRoom
     * 
    **/
    select?: MessageRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MessageRoomInclude | null
  }



  /**
   * Model Friendship
   */


  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipAvgAggregateOutputType = {
    id: number | null
    id_user_1: number | null
    id_user_2: number | null
  }

  export type FriendshipSumAggregateOutputType = {
    id: number | null
    id_user_1: number | null
    id_user_2: number | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: number | null
    id_user_1: number | null
    id_user_2: number | null
    stat_block: boolean | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: number | null
    id_user_1: number | null
    id_user_2: number | null
    stat_block: boolean | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    id_user_1: number
    id_user_2: number
    stat_block: number
    _all: number
  }


  export type FriendshipAvgAggregateInputType = {
    id?: true
    id_user_1?: true
    id_user_2?: true
  }

  export type FriendshipSumAggregateInputType = {
    id?: true
    id_user_1?: true
    id_user_2?: true
  }

  export type FriendshipMinAggregateInputType = {
    id?: true
    id_user_1?: true
    id_user_2?: true
    stat_block?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    id_user_1?: true
    id_user_2?: true
    stat_block?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    id_user_1?: true
    id_user_2?: true
    stat_block?: true
    _all?: true
  }

  export type FriendshipAggregateArgs = {
    /**
     * Filter which Friendship to aggregate.
     * 
    **/
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     * 
    **/
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs = {
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithAggregationInput>
    by: Array<FriendshipScalarFieldEnum>
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _avg?: FriendshipAvgAggregateInputType
    _sum?: FriendshipSumAggregateInputType
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }


  export type FriendshipGroupByOutputType = {
    id: number
    id_user_1: number
    id_user_2: number
    stat_block: boolean
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect = {
    id?: boolean
    id_user_1?: boolean
    user1?: boolean | UserArgs
    id_user_2?: boolean
    user2?: boolean | UserArgs
    stat_block?: boolean
  }

  export type FriendshipInclude = {
    user1?: boolean | UserArgs
    user2?: boolean | UserArgs
  }

  export type FriendshipGetPayload<
    S extends boolean | null | undefined | FriendshipArgs,
    U = keyof S
      > = S extends true
        ? Friendship
    : S extends undefined
    ? never
    : S extends FriendshipArgs | FriendshipFindManyArgs
    ?'include' extends U
    ? Friendship  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Friendship ? Friendship[P] : never
  } 
    : Friendship
  : Friendship


  type FriendshipCountArgs = Merge<
    Omit<FriendshipFindManyArgs, 'select' | 'include'> & {
      select?: FriendshipCountAggregateInputType | true
    }
  >

  export interface FriendshipDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendshipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendshipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Friendship'> extends True ? CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>> : CheckSelect<T, Prisma__FriendshipClient<Friendship | null >, Prisma__FriendshipClient<FriendshipGetPayload<T> | null >>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendshipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendshipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Friendship'> extends True ? CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>> : CheckSelect<T, Prisma__FriendshipClient<Friendship | null >, Prisma__FriendshipClient<FriendshipGetPayload<T> | null >>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FriendshipFindManyArgs>(
      args?: SelectSubset<T, FriendshipFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Friendship>>, PrismaPromise<Array<FriendshipGetPayload<T>>>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
    **/
    create<T extends FriendshipCreateArgs>(
      args: SelectSubset<T, FriendshipCreateArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Create many Friendships.
     *     @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     *     @example
     *     // Create many Friendships
     *     const friendship = await prisma.friendship.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendshipCreateManyArgs>(
      args?: SelectSubset<T, FriendshipCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
    **/
    delete<T extends FriendshipDeleteArgs>(
      args: SelectSubset<T, FriendshipDeleteArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendshipUpdateArgs>(
      args: SelectSubset<T, FriendshipUpdateArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendshipDeleteManyArgs>(
      args?: SelectSubset<T, FriendshipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendshipUpdateManyArgs>(
      args: SelectSubset<T, FriendshipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
    **/
    upsert<T extends FriendshipUpsertArgs>(
      args: SelectSubset<T, FriendshipUpsertArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Find one Friendship that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendshipFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Find the first Friendship that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendshipClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    user2<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Friendship base type for findUnique actions
   */
  export type FriendshipFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     * 
    **/
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship: findUnique
   */
  export interface FriendshipFindUniqueArgs extends FriendshipFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friendship base type for findFirst actions
   */
  export type FriendshipFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     * 
    **/
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     * 
    **/
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     * 
    **/
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     * 
    **/
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }

  /**
   * Friendship: findFirst
   */
  export interface FriendshipFindFirstArgs extends FriendshipFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendships to fetch.
     * 
    **/
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     * 
    **/
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     * 
    **/
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship create
   */
  export type FriendshipCreateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * The data needed to create a Friendship.
     * 
    **/
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }


  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs = {
    /**
     * The data used to create many Friendships.
     * 
    **/
    data: Enumerable<FriendshipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * The data needed to update a Friendship.
     * 
    **/
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     * 
    **/
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs = {
    /**
     * The data used to update Friendships.
     * 
    **/
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     * 
    **/
    where?: FriendshipWhereInput
  }


  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     * 
    **/
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     * 
    **/
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }


  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Filter which Friendship to delete.
     * 
    **/
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs = {
    /**
     * Filter which Friendships to delete
     * 
    **/
    where?: FriendshipWhereInput
  }


  /**
   * Friendship: findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs = FriendshipFindUniqueArgsBase
      

  /**
   * Friendship: findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs = FriendshipFindFirstArgsBase
      

  /**
   * Friendship without action
   */
  export type FriendshipArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
  }



  /**
   * Model Invitationfriend
   */


  export type AggregateInvitationfriend = {
    _count: InvitationfriendCountAggregateOutputType | null
    _avg: InvitationfriendAvgAggregateOutputType | null
    _sum: InvitationfriendSumAggregateOutputType | null
    _min: InvitationfriendMinAggregateOutputType | null
    _max: InvitationfriendMaxAggregateOutputType | null
  }

  export type InvitationfriendAvgAggregateOutputType = {
    id_user_invited: number | null
    id_user_invit_to: number | null
  }

  export type InvitationfriendSumAggregateOutputType = {
    id_user_invited: number | null
    id_user_invit_to: number | null
  }

  export type InvitationfriendMinAggregateOutputType = {
    id_user_invited: number | null
    id_user_invit_to: number | null
  }

  export type InvitationfriendMaxAggregateOutputType = {
    id_user_invited: number | null
    id_user_invit_to: number | null
  }

  export type InvitationfriendCountAggregateOutputType = {
    id_user_invited: number
    id_user_invit_to: number
    _all: number
  }


  export type InvitationfriendAvgAggregateInputType = {
    id_user_invited?: true
    id_user_invit_to?: true
  }

  export type InvitationfriendSumAggregateInputType = {
    id_user_invited?: true
    id_user_invit_to?: true
  }

  export type InvitationfriendMinAggregateInputType = {
    id_user_invited?: true
    id_user_invit_to?: true
  }

  export type InvitationfriendMaxAggregateInputType = {
    id_user_invited?: true
    id_user_invit_to?: true
  }

  export type InvitationfriendCountAggregateInputType = {
    id_user_invited?: true
    id_user_invit_to?: true
    _all?: true
  }

  export type InvitationfriendAggregateArgs = {
    /**
     * Filter which Invitationfriend to aggregate.
     * 
    **/
    where?: InvitationfriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitationfriends to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationfriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvitationfriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitationfriends from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitationfriends.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitationfriends
    **/
    _count?: true | InvitationfriendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvitationfriendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvitationfriendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationfriendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationfriendMaxAggregateInputType
  }

  export type GetInvitationfriendAggregateType<T extends InvitationfriendAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitationfriend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitationfriend[P]>
      : GetScalarType<T[P], AggregateInvitationfriend[P]>
  }




  export type InvitationfriendGroupByArgs = {
    where?: InvitationfriendWhereInput
    orderBy?: Enumerable<InvitationfriendOrderByWithAggregationInput>
    by: Array<InvitationfriendScalarFieldEnum>
    having?: InvitationfriendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationfriendCountAggregateInputType | true
    _avg?: InvitationfriendAvgAggregateInputType
    _sum?: InvitationfriendSumAggregateInputType
    _min?: InvitationfriendMinAggregateInputType
    _max?: InvitationfriendMaxAggregateInputType
  }


  export type InvitationfriendGroupByOutputType = {
    id_user_invited: number
    id_user_invit_to: number
    _count: InvitationfriendCountAggregateOutputType | null
    _avg: InvitationfriendAvgAggregateOutputType | null
    _sum: InvitationfriendSumAggregateOutputType | null
    _min: InvitationfriendMinAggregateOutputType | null
    _max: InvitationfriendMaxAggregateOutputType | null
  }

  type GetInvitationfriendGroupByPayload<T extends InvitationfriendGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvitationfriendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationfriendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationfriendGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationfriendGroupByOutputType[P]>
        }
      >
    >


  export type InvitationfriendSelect = {
    id_user_invited?: boolean
    user1?: boolean | UserArgs
    id_user_invit_to?: boolean
    user2?: boolean | UserArgs
  }

  export type InvitationfriendInclude = {
    user1?: boolean | UserArgs
    user2?: boolean | UserArgs
  }

  export type InvitationfriendGetPayload<
    S extends boolean | null | undefined | InvitationfriendArgs,
    U = keyof S
      > = S extends true
        ? Invitationfriend
    : S extends undefined
    ? never
    : S extends InvitationfriendArgs | InvitationfriendFindManyArgs
    ?'include' extends U
    ? Invitationfriend  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Invitationfriend ? Invitationfriend[P] : never
  } 
    : Invitationfriend
  : Invitationfriend


  type InvitationfriendCountArgs = Merge<
    Omit<InvitationfriendFindManyArgs, 'select' | 'include'> & {
      select?: InvitationfriendCountAggregateInputType | true
    }
  >

  export interface InvitationfriendDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Invitationfriend that matches the filter.
     * @param {InvitationfriendFindUniqueArgs} args - Arguments to find a Invitationfriend
     * @example
     * // Get one Invitationfriend
     * const invitationfriend = await prisma.invitationfriend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvitationfriendFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvitationfriendFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invitationfriend'> extends True ? CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>> : CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend | null >, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T> | null >>

    /**
     * Find the first Invitationfriend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendFindFirstArgs} args - Arguments to find a Invitationfriend
     * @example
     * // Get one Invitationfriend
     * const invitationfriend = await prisma.invitationfriend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvitationfriendFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvitationfriendFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invitationfriend'> extends True ? CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>> : CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend | null >, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T> | null >>

    /**
     * Find zero or more Invitationfriends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitationfriends
     * const invitationfriends = await prisma.invitationfriend.findMany()
     * 
     * // Get first 10 Invitationfriends
     * const invitationfriends = await prisma.invitationfriend.findMany({ take: 10 })
     * 
     * // Only select the `id_user_invited`
     * const invitationfriendWithId_user_invitedOnly = await prisma.invitationfriend.findMany({ select: { id_user_invited: true } })
     * 
    **/
    findMany<T extends InvitationfriendFindManyArgs>(
      args?: SelectSubset<T, InvitationfriendFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invitationfriend>>, PrismaPromise<Array<InvitationfriendGetPayload<T>>>>

    /**
     * Create a Invitationfriend.
     * @param {InvitationfriendCreateArgs} args - Arguments to create a Invitationfriend.
     * @example
     * // Create one Invitationfriend
     * const Invitationfriend = await prisma.invitationfriend.create({
     *   data: {
     *     // ... data to create a Invitationfriend
     *   }
     * })
     * 
    **/
    create<T extends InvitationfriendCreateArgs>(
      args: SelectSubset<T, InvitationfriendCreateArgs>
    ): CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>>

    /**
     * Create many Invitationfriends.
     *     @param {InvitationfriendCreateManyArgs} args - Arguments to create many Invitationfriends.
     *     @example
     *     // Create many Invitationfriends
     *     const invitationfriend = await prisma.invitationfriend.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvitationfriendCreateManyArgs>(
      args?: SelectSubset<T, InvitationfriendCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invitationfriend.
     * @param {InvitationfriendDeleteArgs} args - Arguments to delete one Invitationfriend.
     * @example
     * // Delete one Invitationfriend
     * const Invitationfriend = await prisma.invitationfriend.delete({
     *   where: {
     *     // ... filter to delete one Invitationfriend
     *   }
     * })
     * 
    **/
    delete<T extends InvitationfriendDeleteArgs>(
      args: SelectSubset<T, InvitationfriendDeleteArgs>
    ): CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>>

    /**
     * Update one Invitationfriend.
     * @param {InvitationfriendUpdateArgs} args - Arguments to update one Invitationfriend.
     * @example
     * // Update one Invitationfriend
     * const invitationfriend = await prisma.invitationfriend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvitationfriendUpdateArgs>(
      args: SelectSubset<T, InvitationfriendUpdateArgs>
    ): CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>>

    /**
     * Delete zero or more Invitationfriends.
     * @param {InvitationfriendDeleteManyArgs} args - Arguments to filter Invitationfriends to delete.
     * @example
     * // Delete a few Invitationfriends
     * const { count } = await prisma.invitationfriend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvitationfriendDeleteManyArgs>(
      args?: SelectSubset<T, InvitationfriendDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitationfriends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitationfriends
     * const invitationfriend = await prisma.invitationfriend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvitationfriendUpdateManyArgs>(
      args: SelectSubset<T, InvitationfriendUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invitationfriend.
     * @param {InvitationfriendUpsertArgs} args - Arguments to update or create a Invitationfriend.
     * @example
     * // Update or create a Invitationfriend
     * const invitationfriend = await prisma.invitationfriend.upsert({
     *   create: {
     *     // ... data to create a Invitationfriend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitationfriend we want to update
     *   }
     * })
    **/
    upsert<T extends InvitationfriendUpsertArgs>(
      args: SelectSubset<T, InvitationfriendUpsertArgs>
    ): CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>>

    /**
     * Find one Invitationfriend that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {InvitationfriendFindUniqueOrThrowArgs} args - Arguments to find a Invitationfriend
     * @example
     * // Get one Invitationfriend
     * const invitationfriend = await prisma.invitationfriend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvitationfriendFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, InvitationfriendFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>>

    /**
     * Find the first Invitationfriend that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendFindFirstOrThrowArgs} args - Arguments to find a Invitationfriend
     * @example
     * // Get one Invitationfriend
     * const invitationfriend = await prisma.invitationfriend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvitationfriendFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InvitationfriendFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__InvitationfriendClient<Invitationfriend>, Prisma__InvitationfriendClient<InvitationfriendGetPayload<T>>>

    /**
     * Count the number of Invitationfriends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendCountArgs} args - Arguments to filter Invitationfriends to count.
     * @example
     * // Count the number of Invitationfriends
     * const count = await prisma.invitationfriend.count({
     *   where: {
     *     // ... the filter for the Invitationfriends we want to count
     *   }
     * })
    **/
    count<T extends InvitationfriendCountArgs>(
      args?: Subset<T, InvitationfriendCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationfriendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitationfriend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationfriendAggregateArgs>(args: Subset<T, InvitationfriendAggregateArgs>): PrismaPromise<GetInvitationfriendAggregateType<T>>

    /**
     * Group by Invitationfriend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationfriendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationfriendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationfriendGroupByArgs['orderBy'] }
        : { orderBy?: InvitationfriendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationfriendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationfriendGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitationfriend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvitationfriendClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    user2<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Invitationfriend base type for findUnique actions
   */
  export type InvitationfriendFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * Filter, which Invitationfriend to fetch.
     * 
    **/
    where: InvitationfriendWhereUniqueInput
  }

  /**
   * Invitationfriend: findUnique
   */
  export interface InvitationfriendFindUniqueArgs extends InvitationfriendFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Invitationfriend base type for findFirst actions
   */
  export type InvitationfriendFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * Filter, which Invitationfriend to fetch.
     * 
    **/
    where?: InvitationfriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitationfriends to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationfriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitationfriends.
     * 
    **/
    cursor?: InvitationfriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitationfriends from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitationfriends.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitationfriends.
     * 
    **/
    distinct?: Enumerable<InvitationfriendScalarFieldEnum>
  }

  /**
   * Invitationfriend: findFirst
   */
  export interface InvitationfriendFindFirstArgs extends InvitationfriendFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Invitationfriend findMany
   */
  export type InvitationfriendFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * Filter, which Invitationfriends to fetch.
     * 
    **/
    where?: InvitationfriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitationfriends to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationfriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitationfriends.
     * 
    **/
    cursor?: InvitationfriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitationfriends from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitationfriends.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvitationfriendScalarFieldEnum>
  }


  /**
   * Invitationfriend create
   */
  export type InvitationfriendCreateArgs = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * The data needed to create a Invitationfriend.
     * 
    **/
    data: XOR<InvitationfriendCreateInput, InvitationfriendUncheckedCreateInput>
  }


  /**
   * Invitationfriend createMany
   */
  export type InvitationfriendCreateManyArgs = {
    /**
     * The data used to create many Invitationfriends.
     * 
    **/
    data: Enumerable<InvitationfriendCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invitationfriend update
   */
  export type InvitationfriendUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * The data needed to update a Invitationfriend.
     * 
    **/
    data: XOR<InvitationfriendUpdateInput, InvitationfriendUncheckedUpdateInput>
    /**
     * Choose, which Invitationfriend to update.
     * 
    **/
    where: InvitationfriendWhereUniqueInput
  }


  /**
   * Invitationfriend updateMany
   */
  export type InvitationfriendUpdateManyArgs = {
    /**
     * The data used to update Invitationfriends.
     * 
    **/
    data: XOR<InvitationfriendUpdateManyMutationInput, InvitationfriendUncheckedUpdateManyInput>
    /**
     * Filter which Invitationfriends to update
     * 
    **/
    where?: InvitationfriendWhereInput
  }


  /**
   * Invitationfriend upsert
   */
  export type InvitationfriendUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * The filter to search for the Invitationfriend to update in case it exists.
     * 
    **/
    where: InvitationfriendWhereUniqueInput
    /**
     * In case the Invitationfriend found by the `where` argument doesn't exist, create a new Invitationfriend with this data.
     * 
    **/
    create: XOR<InvitationfriendCreateInput, InvitationfriendUncheckedCreateInput>
    /**
     * In case the Invitationfriend was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvitationfriendUpdateInput, InvitationfriendUncheckedUpdateInput>
  }


  /**
   * Invitationfriend delete
   */
  export type InvitationfriendDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
    /**
     * Filter which Invitationfriend to delete.
     * 
    **/
    where: InvitationfriendWhereUniqueInput
  }


  /**
   * Invitationfriend deleteMany
   */
  export type InvitationfriendDeleteManyArgs = {
    /**
     * Filter which Invitationfriends to delete
     * 
    **/
    where?: InvitationfriendWhereInput
  }


  /**
   * Invitationfriend: findUniqueOrThrow
   */
  export type InvitationfriendFindUniqueOrThrowArgs = InvitationfriendFindUniqueArgsBase
      

  /**
   * Invitationfriend: findFirstOrThrow
   */
  export type InvitationfriendFindFirstOrThrowArgs = InvitationfriendFindFirstArgsBase
      

  /**
   * Invitationfriend without action
   */
  export type InvitationfriendArgs = {
    /**
     * Select specific fields to fetch from the Invitationfriend
     * 
    **/
    select?: InvitationfriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationfriendInclude | null
  }



  /**
   * Model UserAchiev
   */


  export type AggregateUserAchiev = {
    _count: UserAchievCountAggregateOutputType | null
    _avg: UserAchievAvgAggregateOutputType | null
    _sum: UserAchievSumAggregateOutputType | null
    _min: UserAchievMinAggregateOutputType | null
    _max: UserAchievMaxAggregateOutputType | null
  }

  export type UserAchievAvgAggregateOutputType = {
    id: number | null
    achie_id: number | null
    user_id: number | null
  }

  export type UserAchievSumAggregateOutputType = {
    id: number | null
    achie_id: number | null
    user_id: number | null
  }

  export type UserAchievMinAggregateOutputType = {
    id: number | null
    achie_id: number | null
    user_id: number | null
  }

  export type UserAchievMaxAggregateOutputType = {
    id: number | null
    achie_id: number | null
    user_id: number | null
  }

  export type UserAchievCountAggregateOutputType = {
    id: number
    achie_id: number
    user_id: number
    _all: number
  }


  export type UserAchievAvgAggregateInputType = {
    id?: true
    achie_id?: true
    user_id?: true
  }

  export type UserAchievSumAggregateInputType = {
    id?: true
    achie_id?: true
    user_id?: true
  }

  export type UserAchievMinAggregateInputType = {
    id?: true
    achie_id?: true
    user_id?: true
  }

  export type UserAchievMaxAggregateInputType = {
    id?: true
    achie_id?: true
    user_id?: true
  }

  export type UserAchievCountAggregateInputType = {
    id?: true
    achie_id?: true
    user_id?: true
    _all?: true
  }

  export type UserAchievAggregateArgs = {
    /**
     * Filter which UserAchiev to aggregate.
     * 
    **/
    where?: UserAchievWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievs to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAchievOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserAchievWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievs
    **/
    _count?: true | UserAchievCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAchievAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAchievSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievMaxAggregateInputType
  }

  export type GetUserAchievAggregateType<T extends UserAchievAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchiev]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchiev[P]>
      : GetScalarType<T[P], AggregateUserAchiev[P]>
  }




  export type UserAchievGroupByArgs = {
    where?: UserAchievWhereInput
    orderBy?: Enumerable<UserAchievOrderByWithAggregationInput>
    by: Array<UserAchievScalarFieldEnum>
    having?: UserAchievScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievCountAggregateInputType | true
    _avg?: UserAchievAvgAggregateInputType
    _sum?: UserAchievSumAggregateInputType
    _min?: UserAchievMinAggregateInputType
    _max?: UserAchievMaxAggregateInputType
  }


  export type UserAchievGroupByOutputType = {
    id: number
    achie_id: number
    user_id: number
    _count: UserAchievCountAggregateOutputType | null
    _avg: UserAchievAvgAggregateOutputType | null
    _sum: UserAchievSumAggregateOutputType | null
    _min: UserAchievMinAggregateOutputType | null
    _max: UserAchievMaxAggregateOutputType | null
  }

  type GetUserAchievGroupByPayload<T extends UserAchievGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserAchievGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievSelect = {
    id?: boolean
    achie_id?: boolean
    achievement?: boolean | AchievementArgs
    user_id?: boolean
    user?: boolean | UserArgs
  }

  export type UserAchievInclude = {
    achievement?: boolean | AchievementArgs
    user?: boolean | UserArgs
  }

  export type UserAchievGetPayload<
    S extends boolean | null | undefined | UserAchievArgs,
    U = keyof S
      > = S extends true
        ? UserAchiev
    : S extends undefined
    ? never
    : S extends UserAchievArgs | UserAchievFindManyArgs
    ?'include' extends U
    ? UserAchiev  & {
    [P in TrueKeys<S['include']>]:
        P extends 'achievement' ? AchievementGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'achievement' ? AchievementGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserAchiev ? UserAchiev[P] : never
  } 
    : UserAchiev
  : UserAchiev


  type UserAchievCountArgs = Merge<
    Omit<UserAchievFindManyArgs, 'select' | 'include'> & {
      select?: UserAchievCountAggregateInputType | true
    }
  >

  export interface UserAchievDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserAchiev that matches the filter.
     * @param {UserAchievFindUniqueArgs} args - Arguments to find a UserAchiev
     * @example
     * // Get one UserAchiev
     * const userAchiev = await prisma.userAchiev.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserAchievFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserAchievFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserAchiev'> extends True ? CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>> : CheckSelect<T, Prisma__UserAchievClient<UserAchiev | null >, Prisma__UserAchievClient<UserAchievGetPayload<T> | null >>

    /**
     * Find the first UserAchiev that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievFindFirstArgs} args - Arguments to find a UserAchiev
     * @example
     * // Get one UserAchiev
     * const userAchiev = await prisma.userAchiev.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserAchievFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserAchievFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserAchiev'> extends True ? CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>> : CheckSelect<T, Prisma__UserAchievClient<UserAchiev | null >, Prisma__UserAchievClient<UserAchievGetPayload<T> | null >>

    /**
     * Find zero or more UserAchievs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievs
     * const userAchievs = await prisma.userAchiev.findMany()
     * 
     * // Get first 10 UserAchievs
     * const userAchievs = await prisma.userAchiev.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievWithIdOnly = await prisma.userAchiev.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserAchievFindManyArgs>(
      args?: SelectSubset<T, UserAchievFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserAchiev>>, PrismaPromise<Array<UserAchievGetPayload<T>>>>

    /**
     * Create a UserAchiev.
     * @param {UserAchievCreateArgs} args - Arguments to create a UserAchiev.
     * @example
     * // Create one UserAchiev
     * const UserAchiev = await prisma.userAchiev.create({
     *   data: {
     *     // ... data to create a UserAchiev
     *   }
     * })
     * 
    **/
    create<T extends UserAchievCreateArgs>(
      args: SelectSubset<T, UserAchievCreateArgs>
    ): CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>>

    /**
     * Create many UserAchievs.
     *     @param {UserAchievCreateManyArgs} args - Arguments to create many UserAchievs.
     *     @example
     *     // Create many UserAchievs
     *     const userAchiev = await prisma.userAchiev.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserAchievCreateManyArgs>(
      args?: SelectSubset<T, UserAchievCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserAchiev.
     * @param {UserAchievDeleteArgs} args - Arguments to delete one UserAchiev.
     * @example
     * // Delete one UserAchiev
     * const UserAchiev = await prisma.userAchiev.delete({
     *   where: {
     *     // ... filter to delete one UserAchiev
     *   }
     * })
     * 
    **/
    delete<T extends UserAchievDeleteArgs>(
      args: SelectSubset<T, UserAchievDeleteArgs>
    ): CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>>

    /**
     * Update one UserAchiev.
     * @param {UserAchievUpdateArgs} args - Arguments to update one UserAchiev.
     * @example
     * // Update one UserAchiev
     * const userAchiev = await prisma.userAchiev.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserAchievUpdateArgs>(
      args: SelectSubset<T, UserAchievUpdateArgs>
    ): CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>>

    /**
     * Delete zero or more UserAchievs.
     * @param {UserAchievDeleteManyArgs} args - Arguments to filter UserAchievs to delete.
     * @example
     * // Delete a few UserAchievs
     * const { count } = await prisma.userAchiev.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserAchievDeleteManyArgs>(
      args?: SelectSubset<T, UserAchievDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievs
     * const userAchiev = await prisma.userAchiev.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserAchievUpdateManyArgs>(
      args: SelectSubset<T, UserAchievUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAchiev.
     * @param {UserAchievUpsertArgs} args - Arguments to update or create a UserAchiev.
     * @example
     * // Update or create a UserAchiev
     * const userAchiev = await prisma.userAchiev.upsert({
     *   create: {
     *     // ... data to create a UserAchiev
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchiev we want to update
     *   }
     * })
    **/
    upsert<T extends UserAchievUpsertArgs>(
      args: SelectSubset<T, UserAchievUpsertArgs>
    ): CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>>

    /**
     * Find one UserAchiev that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserAchievFindUniqueOrThrowArgs} args - Arguments to find a UserAchiev
     * @example
     * // Get one UserAchiev
     * const userAchiev = await prisma.userAchiev.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserAchievFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserAchievFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>>

    /**
     * Find the first UserAchiev that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievFindFirstOrThrowArgs} args - Arguments to find a UserAchiev
     * @example
     * // Get one UserAchiev
     * const userAchiev = await prisma.userAchiev.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserAchievFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserAchievFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserAchievClient<UserAchiev>, Prisma__UserAchievClient<UserAchievGetPayload<T>>>

    /**
     * Count the number of UserAchievs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievCountArgs} args - Arguments to filter UserAchievs to count.
     * @example
     * // Count the number of UserAchievs
     * const count = await prisma.userAchiev.count({
     *   where: {
     *     // ... the filter for the UserAchievs we want to count
     *   }
     * })
    **/
    count<T extends UserAchievCountArgs>(
      args?: Subset<T, UserAchievCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchiev.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievAggregateArgs>(args: Subset<T, UserAchievAggregateArgs>): PrismaPromise<GetUserAchievAggregateType<T>>

    /**
     * Group by UserAchiev.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchiev.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserAchievClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    achievement<T extends AchievementArgs = {}>(args?: Subset<T, AchievementArgs>): CheckSelect<T, Prisma__AchievementClient<Achievement | null >, Prisma__AchievementClient<AchievementGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserAchiev base type for findUnique actions
   */
  export type UserAchievFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * Filter, which UserAchiev to fetch.
     * 
    **/
    where: UserAchievWhereUniqueInput
  }

  /**
   * UserAchiev: findUnique
   */
  export interface UserAchievFindUniqueArgs extends UserAchievFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAchiev base type for findFirst actions
   */
  export type UserAchievFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * Filter, which UserAchiev to fetch.
     * 
    **/
    where?: UserAchievWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievs to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAchievOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievs.
     * 
    **/
    cursor?: UserAchievWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievs.
     * 
    **/
    distinct?: Enumerable<UserAchievScalarFieldEnum>
  }

  /**
   * UserAchiev: findFirst
   */
  export interface UserAchievFindFirstArgs extends UserAchievFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserAchiev findMany
   */
  export type UserAchievFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * Filter, which UserAchievs to fetch.
     * 
    **/
    where?: UserAchievWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievs to fetch.
     * 
    **/
    orderBy?: Enumerable<UserAchievOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievs.
     * 
    **/
    cursor?: UserAchievWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserAchievScalarFieldEnum>
  }


  /**
   * UserAchiev create
   */
  export type UserAchievCreateArgs = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * The data needed to create a UserAchiev.
     * 
    **/
    data: XOR<UserAchievCreateInput, UserAchievUncheckedCreateInput>
  }


  /**
   * UserAchiev createMany
   */
  export type UserAchievCreateManyArgs = {
    /**
     * The data used to create many UserAchievs.
     * 
    **/
    data: Enumerable<UserAchievCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserAchiev update
   */
  export type UserAchievUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * The data needed to update a UserAchiev.
     * 
    **/
    data: XOR<UserAchievUpdateInput, UserAchievUncheckedUpdateInput>
    /**
     * Choose, which UserAchiev to update.
     * 
    **/
    where: UserAchievWhereUniqueInput
  }


  /**
   * UserAchiev updateMany
   */
  export type UserAchievUpdateManyArgs = {
    /**
     * The data used to update UserAchievs.
     * 
    **/
    data: XOR<UserAchievUpdateManyMutationInput, UserAchievUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievs to update
     * 
    **/
    where?: UserAchievWhereInput
  }


  /**
   * UserAchiev upsert
   */
  export type UserAchievUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * The filter to search for the UserAchiev to update in case it exists.
     * 
    **/
    where: UserAchievWhereUniqueInput
    /**
     * In case the UserAchiev found by the `where` argument doesn't exist, create a new UserAchiev with this data.
     * 
    **/
    create: XOR<UserAchievCreateInput, UserAchievUncheckedCreateInput>
    /**
     * In case the UserAchiev was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserAchievUpdateInput, UserAchievUncheckedUpdateInput>
  }


  /**
   * UserAchiev delete
   */
  export type UserAchievDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
    /**
     * Filter which UserAchiev to delete.
     * 
    **/
    where: UserAchievWhereUniqueInput
  }


  /**
   * UserAchiev deleteMany
   */
  export type UserAchievDeleteManyArgs = {
    /**
     * Filter which UserAchievs to delete
     * 
    **/
    where?: UserAchievWhereInput
  }


  /**
   * UserAchiev: findUniqueOrThrow
   */
  export type UserAchievFindUniqueOrThrowArgs = UserAchievFindUniqueArgsBase
      

  /**
   * UserAchiev: findFirstOrThrow
   */
  export type UserAchievFindFirstOrThrowArgs = UserAchievFindFirstArgsBase
      

  /**
   * UserAchiev without action
   */
  export type UserAchievArgs = {
    /**
     * Select specific fields to fetch from the UserAchiev
     * 
    **/
    select?: UserAchievSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserAchievInclude | null
  }



  /**
   * Model Achievement
   */


  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementAvgAggregateOutputType = {
    achiev_id: number | null
  }

  export type AchievementSumAggregateOutputType = {
    achiev_id: number | null
  }

  export type AchievementMinAggregateOutputType = {
    achiev_id: number | null
    name: string | null
  }

  export type AchievementMaxAggregateOutputType = {
    achiev_id: number | null
    name: string | null
  }

  export type AchievementCountAggregateOutputType = {
    achiev_id: number
    name: number
    _all: number
  }


  export type AchievementAvgAggregateInputType = {
    achiev_id?: true
  }

  export type AchievementSumAggregateInputType = {
    achiev_id?: true
  }

  export type AchievementMinAggregateInputType = {
    achiev_id?: true
    name?: true
  }

  export type AchievementMaxAggregateInputType = {
    achiev_id?: true
    name?: true
  }

  export type AchievementCountAggregateInputType = {
    achiev_id?: true
    name?: true
    _all?: true
  }

  export type AchievementAggregateArgs = {
    /**
     * Filter which Achievement to aggregate.
     * 
    **/
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     * 
    **/
    orderBy?: Enumerable<AchievementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchievementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchievementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs = {
    where?: AchievementWhereInput
    orderBy?: Enumerable<AchievementOrderByWithAggregationInput>
    by: Array<AchievementScalarFieldEnum>
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _avg?: AchievementAvgAggregateInputType
    _sum?: AchievementSumAggregateInputType
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }


  export type AchievementGroupByOutputType = {
    achiev_id: number
    name: string
    _count: AchievementCountAggregateOutputType | null
    _avg: AchievementAvgAggregateOutputType | null
    _sum: AchievementSumAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect = {
    achiev_id?: boolean
    name?: boolean
    user_achiev?: boolean | UserAchievFindManyArgs
    _count?: boolean | AchievementCountOutputTypeArgs
  }

  export type AchievementInclude = {
    user_achiev?: boolean | UserAchievFindManyArgs
    _count?: boolean | AchievementCountOutputTypeArgs
  }

  export type AchievementGetPayload<
    S extends boolean | null | undefined | AchievementArgs,
    U = keyof S
      > = S extends true
        ? Achievement
    : S extends undefined
    ? never
    : S extends AchievementArgs | AchievementFindManyArgs
    ?'include' extends U
    ? Achievement  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user_achiev' ? Array < UserAchievGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? AchievementCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user_achiev' ? Array < UserAchievGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? AchievementCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Achievement ? Achievement[P] : never
  } 
    : Achievement
  : Achievement


  type AchievementCountArgs = Merge<
    Omit<AchievementFindManyArgs, 'select' | 'include'> & {
      select?: AchievementCountAggregateInputType | true
    }
  >

  export interface AchievementDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AchievementFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AchievementFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Achievement'> extends True ? CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>> : CheckSelect<T, Prisma__AchievementClient<Achievement | null >, Prisma__AchievementClient<AchievementGetPayload<T> | null >>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AchievementFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AchievementFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Achievement'> extends True ? CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>> : CheckSelect<T, Prisma__AchievementClient<Achievement | null >, Prisma__AchievementClient<AchievementGetPayload<T> | null >>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `achiev_id`
     * const achievementWithAchiev_idOnly = await prisma.achievement.findMany({ select: { achiev_id: true } })
     * 
    **/
    findMany<T extends AchievementFindManyArgs>(
      args?: SelectSubset<T, AchievementFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Achievement>>, PrismaPromise<Array<AchievementGetPayload<T>>>>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
    **/
    create<T extends AchievementCreateArgs>(
      args: SelectSubset<T, AchievementCreateArgs>
    ): CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>>

    /**
     * Create many Achievements.
     *     @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     *     @example
     *     // Create many Achievements
     *     const achievement = await prisma.achievement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AchievementCreateManyArgs>(
      args?: SelectSubset<T, AchievementCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
    **/
    delete<T extends AchievementDeleteArgs>(
      args: SelectSubset<T, AchievementDeleteArgs>
    ): CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AchievementUpdateArgs>(
      args: SelectSubset<T, AchievementUpdateArgs>
    ): CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AchievementDeleteManyArgs>(
      args?: SelectSubset<T, AchievementDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AchievementUpdateManyArgs>(
      args: SelectSubset<T, AchievementUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
    **/
    upsert<T extends AchievementUpsertArgs>(
      args: SelectSubset<T, AchievementUpsertArgs>
    ): CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>>

    /**
     * Find one Achievement that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AchievementFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>>

    /**
     * Find the first Achievement that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AchievementFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AchievementClient<Achievement>, Prisma__AchievementClient<AchievementGetPayload<T>>>

    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AchievementClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user_achiev<T extends UserAchievFindManyArgs = {}>(args?: Subset<T, UserAchievFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserAchiev>>, PrismaPromise<Array<UserAchievGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Achievement base type for findUnique actions
   */
  export type AchievementFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * Filter, which Achievement to fetch.
     * 
    **/
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement: findUnique
   */
  export interface AchievementFindUniqueArgs extends AchievementFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Achievement base type for findFirst actions
   */
  export type AchievementFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * Filter, which Achievement to fetch.
     * 
    **/
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     * 
    **/
    orderBy?: Enumerable<AchievementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     * 
    **/
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     * 
    **/
    distinct?: Enumerable<AchievementScalarFieldEnum>
  }

  /**
   * Achievement: findFirst
   */
  export interface AchievementFindFirstArgs extends AchievementFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * Filter, which Achievements to fetch.
     * 
    **/
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     * 
    **/
    orderBy?: Enumerable<AchievementOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     * 
    **/
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AchievementScalarFieldEnum>
  }


  /**
   * Achievement create
   */
  export type AchievementCreateArgs = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * The data needed to create a Achievement.
     * 
    **/
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }


  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs = {
    /**
     * The data used to create many Achievements.
     * 
    **/
    data: Enumerable<AchievementCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Achievement update
   */
  export type AchievementUpdateArgs = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * The data needed to update a Achievement.
     * 
    **/
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     * 
    **/
    where: AchievementWhereUniqueInput
  }


  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs = {
    /**
     * The data used to update Achievements.
     * 
    **/
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     * 
    **/
    where?: AchievementWhereInput
  }


  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     * 
    **/
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     * 
    **/
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }


  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
    /**
     * Filter which Achievement to delete.
     * 
    **/
    where: AchievementWhereUniqueInput
  }


  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs = {
    /**
     * Filter which Achievements to delete
     * 
    **/
    where?: AchievementWhereInput
  }


  /**
   * Achievement: findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs = AchievementFindUniqueArgsBase
      

  /**
   * Achievement: findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs = AchievementFindFirstArgsBase
      

  /**
   * Achievement without action
   */
  export type AchievementArgs = {
    /**
     * Select specific fields to fetch from the Achievement
     * 
    **/
    select?: AchievementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AchievementInclude | null
  }



  /**
   * Model match_history
   */


  export type AggregateMatch_history = {
    _count: Match_historyCountAggregateOutputType | null
    _avg: Match_historyAvgAggregateOutputType | null
    _sum: Match_historySumAggregateOutputType | null
    _min: Match_historyMinAggregateOutputType | null
    _max: Match_historyMaxAggregateOutputType | null
  }

  export type Match_historyAvgAggregateOutputType = {
    match_id: number | null
    winner_id: number | null
    loser_id: number | null
    score_winner: number | null
    score_loser: number | null
  }

  export type Match_historySumAggregateOutputType = {
    match_id: number | null
    winner_id: number | null
    loser_id: number | null
    score_winner: number | null
    score_loser: number | null
  }

  export type Match_historyMinAggregateOutputType = {
    match_id: number | null
    mod: string | null
    match_begin: Date | null
    match_end: Date | null
    winner_id: number | null
    loser_id: number | null
    score_winner: number | null
    score_loser: number | null
  }

  export type Match_historyMaxAggregateOutputType = {
    match_id: number | null
    mod: string | null
    match_begin: Date | null
    match_end: Date | null
    winner_id: number | null
    loser_id: number | null
    score_winner: number | null
    score_loser: number | null
  }

  export type Match_historyCountAggregateOutputType = {
    match_id: number
    mod: number
    match_begin: number
    match_end: number
    winner_id: number
    loser_id: number
    score_winner: number
    score_loser: number
    _all: number
  }


  export type Match_historyAvgAggregateInputType = {
    match_id?: true
    winner_id?: true
    loser_id?: true
    score_winner?: true
    score_loser?: true
  }

  export type Match_historySumAggregateInputType = {
    match_id?: true
    winner_id?: true
    loser_id?: true
    score_winner?: true
    score_loser?: true
  }

  export type Match_historyMinAggregateInputType = {
    match_id?: true
    mod?: true
    match_begin?: true
    match_end?: true
    winner_id?: true
    loser_id?: true
    score_winner?: true
    score_loser?: true
  }

  export type Match_historyMaxAggregateInputType = {
    match_id?: true
    mod?: true
    match_begin?: true
    match_end?: true
    winner_id?: true
    loser_id?: true
    score_winner?: true
    score_loser?: true
  }

  export type Match_historyCountAggregateInputType = {
    match_id?: true
    mod?: true
    match_begin?: true
    match_end?: true
    winner_id?: true
    loser_id?: true
    score_winner?: true
    score_loser?: true
    _all?: true
  }

  export type Match_historyAggregateArgs = {
    /**
     * Filter which match_history to aggregate.
     * 
    **/
    where?: match_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of match_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<match_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: match_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` match_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` match_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned match_histories
    **/
    _count?: true | Match_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Match_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Match_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Match_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Match_historyMaxAggregateInputType
  }

  export type GetMatch_historyAggregateType<T extends Match_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch_history[P]>
      : GetScalarType<T[P], AggregateMatch_history[P]>
  }




  export type Match_historyGroupByArgs = {
    where?: match_historyWhereInput
    orderBy?: Enumerable<match_historyOrderByWithAggregationInput>
    by: Array<Match_historyScalarFieldEnum>
    having?: match_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Match_historyCountAggregateInputType | true
    _avg?: Match_historyAvgAggregateInputType
    _sum?: Match_historySumAggregateInputType
    _min?: Match_historyMinAggregateInputType
    _max?: Match_historyMaxAggregateInputType
  }


  export type Match_historyGroupByOutputType = {
    match_id: number
    mod: string
    match_begin: Date
    match_end: Date
    winner_id: number
    loser_id: number
    score_winner: number
    score_loser: number
    _count: Match_historyCountAggregateOutputType | null
    _avg: Match_historyAvgAggregateOutputType | null
    _sum: Match_historySumAggregateOutputType | null
    _min: Match_historyMinAggregateOutputType | null
    _max: Match_historyMaxAggregateOutputType | null
  }

  type GetMatch_historyGroupByPayload<T extends Match_historyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Match_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Match_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Match_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Match_historyGroupByOutputType[P]>
        }
      >
    >


  export type match_historySelect = {
    match_id?: boolean
    mod?: boolean
    match_begin?: boolean
    match_end?: boolean
    winner_id?: boolean
    user1?: boolean | UserArgs
    loser_id?: boolean
    user2?: boolean | UserArgs
    score_winner?: boolean
    score_loser?: boolean
  }

  export type match_historyInclude = {
    user1?: boolean | UserArgs
    user2?: boolean | UserArgs
  }

  export type match_historyGetPayload<
    S extends boolean | null | undefined | match_historyArgs,
    U = keyof S
      > = S extends true
        ? match_history
    : S extends undefined
    ? never
    : S extends match_historyArgs | match_historyFindManyArgs
    ?'include' extends U
    ? match_history  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user1' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user2' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof match_history ? match_history[P] : never
  } 
    : match_history
  : match_history


  type match_historyCountArgs = Merge<
    Omit<match_historyFindManyArgs, 'select' | 'include'> & {
      select?: Match_historyCountAggregateInputType | true
    }
  >

  export interface match_historyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Match_history that matches the filter.
     * @param {match_historyFindUniqueArgs} args - Arguments to find a Match_history
     * @example
     * // Get one Match_history
     * const match_history = await prisma.match_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends match_historyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, match_historyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'match_history'> extends True ? CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>> : CheckSelect<T, Prisma__match_historyClient<match_history | null >, Prisma__match_historyClient<match_historyGetPayload<T> | null >>

    /**
     * Find the first Match_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {match_historyFindFirstArgs} args - Arguments to find a Match_history
     * @example
     * // Get one Match_history
     * const match_history = await prisma.match_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends match_historyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, match_historyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'match_history'> extends True ? CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>> : CheckSelect<T, Prisma__match_historyClient<match_history | null >, Prisma__match_historyClient<match_historyGetPayload<T> | null >>

    /**
     * Find zero or more Match_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {match_historyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Match_histories
     * const match_histories = await prisma.match_history.findMany()
     * 
     * // Get first 10 Match_histories
     * const match_histories = await prisma.match_history.findMany({ take: 10 })
     * 
     * // Only select the `match_id`
     * const match_historyWithMatch_idOnly = await prisma.match_history.findMany({ select: { match_id: true } })
     * 
    **/
    findMany<T extends match_historyFindManyArgs>(
      args?: SelectSubset<T, match_historyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<match_history>>, PrismaPromise<Array<match_historyGetPayload<T>>>>

    /**
     * Create a Match_history.
     * @param {match_historyCreateArgs} args - Arguments to create a Match_history.
     * @example
     * // Create one Match_history
     * const Match_history = await prisma.match_history.create({
     *   data: {
     *     // ... data to create a Match_history
     *   }
     * })
     * 
    **/
    create<T extends match_historyCreateArgs>(
      args: SelectSubset<T, match_historyCreateArgs>
    ): CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>>

    /**
     * Create many Match_histories.
     *     @param {match_historyCreateManyArgs} args - Arguments to create many Match_histories.
     *     @example
     *     // Create many Match_histories
     *     const match_history = await prisma.match_history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends match_historyCreateManyArgs>(
      args?: SelectSubset<T, match_historyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Match_history.
     * @param {match_historyDeleteArgs} args - Arguments to delete one Match_history.
     * @example
     * // Delete one Match_history
     * const Match_history = await prisma.match_history.delete({
     *   where: {
     *     // ... filter to delete one Match_history
     *   }
     * })
     * 
    **/
    delete<T extends match_historyDeleteArgs>(
      args: SelectSubset<T, match_historyDeleteArgs>
    ): CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>>

    /**
     * Update one Match_history.
     * @param {match_historyUpdateArgs} args - Arguments to update one Match_history.
     * @example
     * // Update one Match_history
     * const match_history = await prisma.match_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends match_historyUpdateArgs>(
      args: SelectSubset<T, match_historyUpdateArgs>
    ): CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>>

    /**
     * Delete zero or more Match_histories.
     * @param {match_historyDeleteManyArgs} args - Arguments to filter Match_histories to delete.
     * @example
     * // Delete a few Match_histories
     * const { count } = await prisma.match_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends match_historyDeleteManyArgs>(
      args?: SelectSubset<T, match_historyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Match_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {match_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Match_histories
     * const match_history = await prisma.match_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends match_historyUpdateManyArgs>(
      args: SelectSubset<T, match_historyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Match_history.
     * @param {match_historyUpsertArgs} args - Arguments to update or create a Match_history.
     * @example
     * // Update or create a Match_history
     * const match_history = await prisma.match_history.upsert({
     *   create: {
     *     // ... data to create a Match_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match_history we want to update
     *   }
     * })
    **/
    upsert<T extends match_historyUpsertArgs>(
      args: SelectSubset<T, match_historyUpsertArgs>
    ): CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>>

    /**
     * Find one Match_history that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {match_historyFindUniqueOrThrowArgs} args - Arguments to find a Match_history
     * @example
     * // Get one Match_history
     * const match_history = await prisma.match_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends match_historyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, match_historyFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>>

    /**
     * Find the first Match_history that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {match_historyFindFirstOrThrowArgs} args - Arguments to find a Match_history
     * @example
     * // Get one Match_history
     * const match_history = await prisma.match_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends match_historyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, match_historyFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__match_historyClient<match_history>, Prisma__match_historyClient<match_historyGetPayload<T>>>

    /**
     * Count the number of Match_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {match_historyCountArgs} args - Arguments to filter Match_histories to count.
     * @example
     * // Count the number of Match_histories
     * const count = await prisma.match_history.count({
     *   where: {
     *     // ... the filter for the Match_histories we want to count
     *   }
     * })
    **/
    count<T extends match_historyCountArgs>(
      args?: Subset<T, match_historyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Match_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Match_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Match_historyAggregateArgs>(args: Subset<T, Match_historyAggregateArgs>): PrismaPromise<GetMatch_historyAggregateType<T>>

    /**
     * Group by Match_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Match_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Match_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Match_historyGroupByArgs['orderBy'] }
        : { orderBy?: Match_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Match_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatch_historyGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for match_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__match_historyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    user2<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * match_history base type for findUnique actions
   */
  export type match_historyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * Filter, which match_history to fetch.
     * 
    **/
    where: match_historyWhereUniqueInput
  }

  /**
   * match_history: findUnique
   */
  export interface match_historyFindUniqueArgs extends match_historyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * match_history base type for findFirst actions
   */
  export type match_historyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * Filter, which match_history to fetch.
     * 
    **/
    where?: match_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of match_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<match_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for match_histories.
     * 
    **/
    cursor?: match_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` match_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` match_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of match_histories.
     * 
    **/
    distinct?: Enumerable<Match_historyScalarFieldEnum>
  }

  /**
   * match_history: findFirst
   */
  export interface match_historyFindFirstArgs extends match_historyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * match_history findMany
   */
  export type match_historyFindManyArgs = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * Filter, which match_histories to fetch.
     * 
    **/
    where?: match_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of match_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<match_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing match_histories.
     * 
    **/
    cursor?: match_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` match_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` match_histories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Match_historyScalarFieldEnum>
  }


  /**
   * match_history create
   */
  export type match_historyCreateArgs = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * The data needed to create a match_history.
     * 
    **/
    data: XOR<match_historyCreateInput, match_historyUncheckedCreateInput>
  }


  /**
   * match_history createMany
   */
  export type match_historyCreateManyArgs = {
    /**
     * The data used to create many match_histories.
     * 
    **/
    data: Enumerable<match_historyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * match_history update
   */
  export type match_historyUpdateArgs = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * The data needed to update a match_history.
     * 
    **/
    data: XOR<match_historyUpdateInput, match_historyUncheckedUpdateInput>
    /**
     * Choose, which match_history to update.
     * 
    **/
    where: match_historyWhereUniqueInput
  }


  /**
   * match_history updateMany
   */
  export type match_historyUpdateManyArgs = {
    /**
     * The data used to update match_histories.
     * 
    **/
    data: XOR<match_historyUpdateManyMutationInput, match_historyUncheckedUpdateManyInput>
    /**
     * Filter which match_histories to update
     * 
    **/
    where?: match_historyWhereInput
  }


  /**
   * match_history upsert
   */
  export type match_historyUpsertArgs = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * The filter to search for the match_history to update in case it exists.
     * 
    **/
    where: match_historyWhereUniqueInput
    /**
     * In case the match_history found by the `where` argument doesn't exist, create a new match_history with this data.
     * 
    **/
    create: XOR<match_historyCreateInput, match_historyUncheckedCreateInput>
    /**
     * In case the match_history was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<match_historyUpdateInput, match_historyUncheckedUpdateInput>
  }


  /**
   * match_history delete
   */
  export type match_historyDeleteArgs = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
    /**
     * Filter which match_history to delete.
     * 
    **/
    where: match_historyWhereUniqueInput
  }


  /**
   * match_history deleteMany
   */
  export type match_historyDeleteManyArgs = {
    /**
     * Filter which match_histories to delete
     * 
    **/
    where?: match_historyWhereInput
  }


  /**
   * match_history: findUniqueOrThrow
   */
  export type match_historyFindUniqueOrThrowArgs = match_historyFindUniqueArgsBase
      

  /**
   * match_history: findFirstOrThrow
   */
  export type match_historyFindFirstOrThrowArgs = match_historyFindFirstArgsBase
      

  /**
   * match_history without action
   */
  export type match_historyArgs = {
    /**
     * Select specific fields to fetch from the match_history
     * 
    **/
    select?: match_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: match_historyInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AchievementScalarFieldEnum: {
    achiev_id: 'achiev_id',
    name: 'name'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const DirectMessageScalarFieldEnum: {
    id: 'id',
    creationDate: 'creationDate',
    from: 'from',
    to: 'to',
    content_msg: 'content_msg'
  };

  export type DirectMessageScalarFieldEnum = (typeof DirectMessageScalarFieldEnum)[keyof typeof DirectMessageScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    id_user_1: 'id_user_1',
    id_user_2: 'id_user_2',
    stat_block: 'stat_block'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const InvitationfriendScalarFieldEnum: {
    id_user_invited: 'id_user_invited',
    id_user_invit_to: 'id_user_invit_to'
  };

  export type InvitationfriendScalarFieldEnum = (typeof InvitationfriendScalarFieldEnum)[keyof typeof InvitationfriendScalarFieldEnum]


  export const Match_historyScalarFieldEnum: {
    match_id: 'match_id',
    mod: 'mod',
    match_begin: 'match_begin',
    match_end: 'match_end',
    winner_id: 'winner_id',
    loser_id: 'loser_id',
    score_winner: 'score_winner',
    score_loser: 'score_loser'
  };

  export type Match_historyScalarFieldEnum = (typeof Match_historyScalarFieldEnum)[keyof typeof Match_historyScalarFieldEnum]


  export const MessageRoomScalarFieldEnum: {
    id: 'id',
    creationDate: 'creationDate',
    from: 'from',
    room_name: 'room_name',
    content_msg: 'content_msg'
  };

  export type MessageRoomScalarFieldEnum = (typeof MessageRoomScalarFieldEnum)[keyof typeof MessageRoomScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    password: 'password',
    owner: 'owner'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserAchievScalarFieldEnum: {
    id: 'id',
    achie_id: 'achie_id',
    user_id: 'user_id'
  };

  export type UserAchievScalarFieldEnum = (typeof UserAchievScalarFieldEnum)[keyof typeof UserAchievScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    username: 'username',
    avatar: 'avatar',
    email: 'email',
    token_google_auth: 'token_google_auth',
    losses: 'losses',
    wins: 'wins',
    ladder_level: 'ladder_level'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Users_roomScalarFieldEnum: {
    id: 'id',
    username: 'username',
    user_role: 'user_role',
    room_name: 'room_name',
    state_user: 'state_user'
  };

  export type Users_roomScalarFieldEnum = (typeof Users_roomScalarFieldEnum)[keyof typeof Users_roomScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    login?: StringFilter | string
    username?: StringFilter | string
    avatar?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    token_google_auth?: StringNullableFilter | string | null
    losses?: IntFilter | number
    wins?: IntFilter | number
    ladder_level?: IntFilter | number
    users_room?: Users_roomListRelationFilter
    room?: RoomListRelationFilter
    directmsg?: DirectMessageListRelationFilter
    dm?: DirectMessageListRelationFilter
    msg_room?: MessageRoomListRelationFilter
    userachiev?: UserAchievListRelationFilter
    invit_friend?: InvitationfriendListRelationFilter
    invit_fr?: InvitationfriendListRelationFilter
    friend?: FriendshipListRelationFilter
    friend_rel?: FriendshipListRelationFilter
    match_hist1?: Match_historyListRelationFilter
    match_hist2?: Match_historyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    token_google_auth?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
    users_room?: Users_roomOrderByRelationAggregateInput
    room?: RoomOrderByRelationAggregateInput
    directmsg?: DirectMessageOrderByRelationAggregateInput
    dm?: DirectMessageOrderByRelationAggregateInput
    msg_room?: MessageRoomOrderByRelationAggregateInput
    userachiev?: UserAchievOrderByRelationAggregateInput
    invit_friend?: InvitationfriendOrderByRelationAggregateInput
    invit_fr?: InvitationfriendOrderByRelationAggregateInput
    friend?: FriendshipOrderByRelationAggregateInput
    friend_rel?: FriendshipOrderByRelationAggregateInput
    match_hist1?: match_historyOrderByRelationAggregateInput
    match_hist2?: match_historyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    login?: string
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    token_google_auth?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    login?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    avatar?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    token_google_auth?: StringNullableWithAggregatesFilter | string | null
    losses?: IntWithAggregatesFilter | number
    wins?: IntWithAggregatesFilter | number
    ladder_level?: IntWithAggregatesFilter | number
  }

  export type Users_roomWhereInput = {
    AND?: Enumerable<Users_roomWhereInput>
    OR?: Enumerable<Users_roomWhereInput>
    NOT?: Enumerable<Users_roomWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    user_role?: StringFilter | string
    room_name?: StringFilter | string
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    state_user?: StringFilter | string
  }

  export type Users_roomOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    user?: UserOrderByWithRelationInput
    user_role?: SortOrder
    room_name?: SortOrder
    room?: RoomOrderByWithRelationInput
    state_user?: SortOrder
  }

  export type Users_roomWhereUniqueInput = {
    id?: number
    username_room_name?: Users_roomUsernameRoom_nameCompoundUniqueInput
  }

  export type Users_roomOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    user_role?: SortOrder
    room_name?: SortOrder
    state_user?: SortOrder
    _count?: Users_roomCountOrderByAggregateInput
    _avg?: Users_roomAvgOrderByAggregateInput
    _max?: Users_roomMaxOrderByAggregateInput
    _min?: Users_roomMinOrderByAggregateInput
    _sum?: Users_roomSumOrderByAggregateInput
  }

  export type Users_roomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Users_roomScalarWhereWithAggregatesInput>
    OR?: Enumerable<Users_roomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Users_roomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    user_role?: StringWithAggregatesFilter | string
    room_name?: StringWithAggregatesFilter | string
    state_user?: StringWithAggregatesFilter | string
  }

  export type RoomWhereInput = {
    AND?: Enumerable<RoomWhereInput>
    OR?: Enumerable<RoomWhereInput>
    NOT?: Enumerable<RoomWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    password?: StringNullableFilter | string | null
    owner?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    users_room?: Users_roomListRelationFilter
    msg_room?: MessageRoomListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    owner?: SortOrder
    user?: UserOrderByWithRelationInput
    users_room?: Users_roomOrderByRelationAggregateInput
    msg_room?: MessageRoomOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    owner?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    owner?: StringWithAggregatesFilter | string
  }

  export type DirectMessageWhereInput = {
    AND?: Enumerable<DirectMessageWhereInput>
    OR?: Enumerable<DirectMessageWhereInput>
    NOT?: Enumerable<DirectMessageWhereInput>
    id?: IntFilter | number
    creationDate?: DateTimeFilter | Date | string
    from?: StringFilter | string
    user1?: XOR<UserRelationFilter, UserWhereInput>
    to?: StringFilter | string
    user2?: XOR<UserRelationFilter, UserWhereInput>
    content_msg?: StringFilter | string
  }

  export type DirectMessageOrderByWithRelationInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    user1?: UserOrderByWithRelationInput
    to?: SortOrder
    user2?: UserOrderByWithRelationInput
    content_msg?: SortOrder
  }

  export type DirectMessageWhereUniqueInput = {
    id?: number
  }

  export type DirectMessageOrderByWithAggregationInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content_msg?: SortOrder
    _count?: DirectMessageCountOrderByAggregateInput
    _avg?: DirectMessageAvgOrderByAggregateInput
    _max?: DirectMessageMaxOrderByAggregateInput
    _min?: DirectMessageMinOrderByAggregateInput
    _sum?: DirectMessageSumOrderByAggregateInput
  }

  export type DirectMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DirectMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<DirectMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DirectMessageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creationDate?: DateTimeWithAggregatesFilter | Date | string
    from?: StringWithAggregatesFilter | string
    to?: StringWithAggregatesFilter | string
    content_msg?: StringWithAggregatesFilter | string
  }

  export type MessageRoomWhereInput = {
    AND?: Enumerable<MessageRoomWhereInput>
    OR?: Enumerable<MessageRoomWhereInput>
    NOT?: Enumerable<MessageRoomWhereInput>
    id?: IntFilter | number
    creationDate?: DateTimeFilter | Date | string
    from?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    room_name?: StringFilter | string
    room?: XOR<RoomRelationFilter, RoomWhereInput>
    content_msg?: StringFilter | string
  }

  export type MessageRoomOrderByWithRelationInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    user?: UserOrderByWithRelationInput
    room_name?: SortOrder
    room?: RoomOrderByWithRelationInput
    content_msg?: SortOrder
  }

  export type MessageRoomWhereUniqueInput = {
    id?: number
  }

  export type MessageRoomOrderByWithAggregationInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    room_name?: SortOrder
    content_msg?: SortOrder
    _count?: MessageRoomCountOrderByAggregateInput
    _avg?: MessageRoomAvgOrderByAggregateInput
    _max?: MessageRoomMaxOrderByAggregateInput
    _min?: MessageRoomMinOrderByAggregateInput
    _sum?: MessageRoomSumOrderByAggregateInput
  }

  export type MessageRoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageRoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageRoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageRoomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    creationDate?: DateTimeWithAggregatesFilter | Date | string
    from?: StringWithAggregatesFilter | string
    room_name?: StringWithAggregatesFilter | string
    content_msg?: StringWithAggregatesFilter | string
  }

  export type FriendshipWhereInput = {
    AND?: Enumerable<FriendshipWhereInput>
    OR?: Enumerable<FriendshipWhereInput>
    NOT?: Enumerable<FriendshipWhereInput>
    id?: IntFilter | number
    id_user_1?: IntFilter | number
    user1?: XOR<UserRelationFilter, UserWhereInput>
    id_user_2?: IntFilter | number
    user2?: XOR<UserRelationFilter, UserWhereInput>
    stat_block?: BoolFilter | boolean
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    user1?: UserOrderByWithRelationInput
    id_user_2?: SortOrder
    user2?: UserOrderByWithRelationInput
    stat_block?: SortOrder
  }

  export type FriendshipWhereUniqueInput = {
    id?: number
  }

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    id_user_2?: SortOrder
    stat_block?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _avg?: FriendshipAvgOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
    _sum?: FriendshipSumOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_user_1?: IntWithAggregatesFilter | number
    id_user_2?: IntWithAggregatesFilter | number
    stat_block?: BoolWithAggregatesFilter | boolean
  }

  export type InvitationfriendWhereInput = {
    AND?: Enumerable<InvitationfriendWhereInput>
    OR?: Enumerable<InvitationfriendWhereInput>
    NOT?: Enumerable<InvitationfriendWhereInput>
    id_user_invited?: IntFilter | number
    user1?: XOR<UserRelationFilter, UserWhereInput>
    id_user_invit_to?: IntFilter | number
    user2?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InvitationfriendOrderByWithRelationInput = {
    id_user_invited?: SortOrder
    user1?: UserOrderByWithRelationInput
    id_user_invit_to?: SortOrder
    user2?: UserOrderByWithRelationInput
  }

  export type InvitationfriendWhereUniqueInput = {
    id_user_invited_id_user_invit_to?: InvitationfriendId_user_invitedId_user_invit_toCompoundUniqueInput
  }

  export type InvitationfriendOrderByWithAggregationInput = {
    id_user_invited?: SortOrder
    id_user_invit_to?: SortOrder
    _count?: InvitationfriendCountOrderByAggregateInput
    _avg?: InvitationfriendAvgOrderByAggregateInput
    _max?: InvitationfriendMaxOrderByAggregateInput
    _min?: InvitationfriendMinOrderByAggregateInput
    _sum?: InvitationfriendSumOrderByAggregateInput
  }

  export type InvitationfriendScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvitationfriendScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvitationfriendScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvitationfriendScalarWhereWithAggregatesInput>
    id_user_invited?: IntWithAggregatesFilter | number
    id_user_invit_to?: IntWithAggregatesFilter | number
  }

  export type UserAchievWhereInput = {
    AND?: Enumerable<UserAchievWhereInput>
    OR?: Enumerable<UserAchievWhereInput>
    NOT?: Enumerable<UserAchievWhereInput>
    id?: IntFilter | number
    achie_id?: IntFilter | number
    achievement?: XOR<AchievementRelationFilter, AchievementWhereInput>
    user_id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserAchievOrderByWithRelationInput = {
    id?: SortOrder
    achie_id?: SortOrder
    achievement?: AchievementOrderByWithRelationInput
    user_id?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserAchievWhereUniqueInput = {
    id?: number
  }

  export type UserAchievOrderByWithAggregationInput = {
    id?: SortOrder
    achie_id?: SortOrder
    user_id?: SortOrder
    _count?: UserAchievCountOrderByAggregateInput
    _avg?: UserAchievAvgOrderByAggregateInput
    _max?: UserAchievMaxOrderByAggregateInput
    _min?: UserAchievMinOrderByAggregateInput
    _sum?: UserAchievSumOrderByAggregateInput
  }

  export type UserAchievScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserAchievScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserAchievScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserAchievScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    achie_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
  }

  export type AchievementWhereInput = {
    AND?: Enumerable<AchievementWhereInput>
    OR?: Enumerable<AchievementWhereInput>
    NOT?: Enumerable<AchievementWhereInput>
    achiev_id?: IntFilter | number
    name?: StringFilter | string
    user_achiev?: UserAchievListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    achiev_id?: SortOrder
    name?: SortOrder
    user_achiev?: UserAchievOrderByRelationAggregateInput
  }

  export type AchievementWhereUniqueInput = {
    achiev_id?: number
  }

  export type AchievementOrderByWithAggregationInput = {
    achiev_id?: SortOrder
    name?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _avg?: AchievementAvgOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
    _sum?: AchievementSumOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AchievementScalarWhereWithAggregatesInput>
    OR?: Enumerable<AchievementScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AchievementScalarWhereWithAggregatesInput>
    achiev_id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type match_historyWhereInput = {
    AND?: Enumerable<match_historyWhereInput>
    OR?: Enumerable<match_historyWhereInput>
    NOT?: Enumerable<match_historyWhereInput>
    match_id?: IntFilter | number
    mod?: StringFilter | string
    match_begin?: DateTimeFilter | Date | string
    match_end?: DateTimeFilter | Date | string
    winner_id?: IntFilter | number
    user1?: XOR<UserRelationFilter, UserWhereInput>
    loser_id?: IntFilter | number
    user2?: XOR<UserRelationFilter, UserWhereInput>
    score_winner?: IntFilter | number
    score_loser?: IntFilter | number
  }

  export type match_historyOrderByWithRelationInput = {
    match_id?: SortOrder
    mod?: SortOrder
    match_begin?: SortOrder
    match_end?: SortOrder
    winner_id?: SortOrder
    user1?: UserOrderByWithRelationInput
    loser_id?: SortOrder
    user2?: UserOrderByWithRelationInput
    score_winner?: SortOrder
    score_loser?: SortOrder
  }

  export type match_historyWhereUniqueInput = {
    match_id?: number
  }

  export type match_historyOrderByWithAggregationInput = {
    match_id?: SortOrder
    mod?: SortOrder
    match_begin?: SortOrder
    match_end?: SortOrder
    winner_id?: SortOrder
    loser_id?: SortOrder
    score_winner?: SortOrder
    score_loser?: SortOrder
    _count?: match_historyCountOrderByAggregateInput
    _avg?: match_historyAvgOrderByAggregateInput
    _max?: match_historyMaxOrderByAggregateInput
    _min?: match_historyMinOrderByAggregateInput
    _sum?: match_historySumOrderByAggregateInput
  }

  export type match_historyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<match_historyScalarWhereWithAggregatesInput>
    OR?: Enumerable<match_historyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<match_historyScalarWhereWithAggregatesInput>
    match_id?: IntWithAggregatesFilter | number
    mod?: StringWithAggregatesFilter | string
    match_begin?: DateTimeWithAggregatesFilter | Date | string
    match_end?: DateTimeWithAggregatesFilter | Date | string
    winner_id?: IntWithAggregatesFilter | number
    loser_id?: IntWithAggregatesFilter | number
    score_winner?: IntWithAggregatesFilter | number
    score_loser?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserUpdateInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
  }

  export type UserUpdateManyMutationInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
  }

  export type Users_roomCreateInput = {
    user: UserCreateNestedOneWithoutUsers_roomInput
    user_role: string
    room: RoomCreateNestedOneWithoutUsers_roomInput
    state_user: string
  }

  export type Users_roomUncheckedCreateInput = {
    id?: number
    username: string
    user_role: string
    room_name: string
    state_user: string
  }

  export type Users_roomUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUsers_roomNestedInput
    user_role?: StringFieldUpdateOperationsInput | string
    room?: RoomUpdateOneRequiredWithoutUsers_roomNestedInput
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type Users_roomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
    room_name?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type Users_roomCreateManyInput = {
    id?: number
    username: string
    user_role: string
    room_name: string
    state_user: string
  }

  export type Users_roomUpdateManyMutationInput = {
    user_role?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type Users_roomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
    room_name?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateInput = {
    name: string
    type: string
    password?: string | null
    user: UserCreateNestedOneWithoutRoomInput
    users_room?: Users_roomCreateNestedManyWithoutRoomInput
    msg_room?: MessageRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    password?: string | null
    owner: string
    users_room?: Users_roomUncheckedCreateNestedManyWithoutRoomInput
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutRoomNestedInput
    users_room?: Users_roomUpdateManyWithoutRoomNestedInput
    msg_room?: MessageRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: StringFieldUpdateOperationsInput | string
    users_room?: Users_roomUncheckedUpdateManyWithoutRoomNestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    name: string
    type: string
    password?: string | null
    owner: string
  }

  export type RoomUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageCreateInput = {
    creationDate?: Date | string
    user1: UserCreateNestedOneWithoutDirectmsgInput
    user2: UserCreateNestedOneWithoutDmInput
    content_msg: string
  }

  export type DirectMessageUncheckedCreateInput = {
    id?: number
    creationDate?: Date | string
    from: string
    to: string
    content_msg: string
  }

  export type DirectMessageUpdateInput = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutDirectmsgNestedInput
    user2?: UserUpdateOneRequiredWithoutDmNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageCreateManyInput = {
    id?: number
    creationDate?: Date | string
    from: string
    to: string
    content_msg: string
  }

  export type DirectMessageUpdateManyMutationInput = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomCreateInput = {
    creationDate?: Date | string
    user: UserCreateNestedOneWithoutMsg_roomInput
    room: RoomCreateNestedOneWithoutMsg_roomInput
    content_msg: string
  }

  export type MessageRoomUncheckedCreateInput = {
    id?: number
    creationDate?: Date | string
    from: string
    room_name: string
    content_msg: string
  }

  export type MessageRoomUpdateInput = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMsg_roomNestedInput
    room?: RoomUpdateOneRequiredWithoutMsg_roomNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    room_name?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomCreateManyInput = {
    id?: number
    creationDate?: Date | string
    from: string
    room_name: string
    content_msg: string
  }

  export type MessageRoomUpdateManyMutationInput = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    room_name?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipCreateInput = {
    user1: UserCreateNestedOneWithoutFriendInput
    user2: UserCreateNestedOneWithoutFriend_relInput
    stat_block?: boolean
  }

  export type FriendshipUncheckedCreateInput = {
    id?: number
    id_user_1: number
    id_user_2: number
    stat_block?: boolean
  }

  export type FriendshipUpdateInput = {
    user1?: UserUpdateOneRequiredWithoutFriendNestedInput
    user2?: UserUpdateOneRequiredWithoutFriend_relNestedInput
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user_1?: IntFieldUpdateOperationsInput | number
    id_user_2?: IntFieldUpdateOperationsInput | number
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipCreateManyInput = {
    id?: number
    id_user_1: number
    id_user_2: number
    stat_block?: boolean
  }

  export type FriendshipUpdateManyMutationInput = {
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user_1?: IntFieldUpdateOperationsInput | number
    id_user_2?: IntFieldUpdateOperationsInput | number
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationfriendCreateInput = {
    user1: UserCreateNestedOneWithoutInvit_friendInput
    user2: UserCreateNestedOneWithoutInvit_frInput
  }

  export type InvitationfriendUncheckedCreateInput = {
    id_user_invited: number
    id_user_invit_to: number
  }

  export type InvitationfriendUpdateInput = {
    user1?: UserUpdateOneRequiredWithoutInvit_friendNestedInput
    user2?: UserUpdateOneRequiredWithoutInvit_frNestedInput
  }

  export type InvitationfriendUncheckedUpdateInput = {
    id_user_invited?: IntFieldUpdateOperationsInput | number
    id_user_invit_to?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationfriendCreateManyInput = {
    id_user_invited: number
    id_user_invit_to: number
  }

  export type InvitationfriendUpdateManyMutationInput = {

  }

  export type InvitationfriendUncheckedUpdateManyInput = {
    id_user_invited?: IntFieldUpdateOperationsInput | number
    id_user_invit_to?: IntFieldUpdateOperationsInput | number
  }

  export type UserAchievCreateInput = {
    achievement: AchievementCreateNestedOneWithoutUser_achievInput
    user: UserCreateNestedOneWithoutUserachievInput
  }

  export type UserAchievUncheckedCreateInput = {
    id?: number
    achie_id: number
    user_id: number
  }

  export type UserAchievUpdateInput = {
    achievement?: AchievementUpdateOneRequiredWithoutUser_achievNestedInput
    user?: UserUpdateOneRequiredWithoutUserachievNestedInput
  }

  export type UserAchievUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    achie_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserAchievCreateManyInput = {
    id?: number
    achie_id: number
    user_id: number
  }

  export type UserAchievUpdateManyMutationInput = {

  }

  export type UserAchievUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    achie_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type AchievementCreateInput = {
    name: string
    user_achiev?: UserAchievCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    achiev_id?: number
    name: string
    user_achiev?: UserAchievUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user_achiev?: UserAchievUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    achiev_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_achiev?: UserAchievUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    achiev_id?: number
    name: string
  }

  export type AchievementUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementUncheckedUpdateManyInput = {
    achiev_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type match_historyCreateInput = {
    mod: string
    match_begin: Date | string
    match_end: Date | string
    user1: UserCreateNestedOneWithoutMatch_hist1Input
    user2: UserCreateNestedOneWithoutMatch_hist2Input
    score_winner: number
    score_loser: number
  }

  export type match_historyUncheckedCreateInput = {
    match_id?: number
    mod: string
    match_begin: Date | string
    match_end: Date | string
    winner_id: number
    loser_id: number
    score_winner: number
    score_loser: number
  }

  export type match_historyUpdateInput = {
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutMatch_hist1NestedInput
    user2?: UserUpdateOneRequiredWithoutMatch_hist2NestedInput
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUncheckedUpdateInput = {
    match_id?: IntFieldUpdateOperationsInput | number
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    winner_id?: IntFieldUpdateOperationsInput | number
    loser_id?: IntFieldUpdateOperationsInput | number
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyCreateManyInput = {
    match_id?: number
    mod: string
    match_begin: Date | string
    match_end: Date | string
    winner_id: number
    loser_id: number
    score_winner: number
    score_loser: number
  }

  export type match_historyUpdateManyMutationInput = {
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUncheckedUpdateManyInput = {
    match_id?: IntFieldUpdateOperationsInput | number
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    winner_id?: IntFieldUpdateOperationsInput | number
    loser_id?: IntFieldUpdateOperationsInput | number
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type Users_roomListRelationFilter = {
    every?: Users_roomWhereInput
    some?: Users_roomWhereInput
    none?: Users_roomWhereInput
  }

  export type RoomListRelationFilter = {
    every?: RoomWhereInput
    some?: RoomWhereInput
    none?: RoomWhereInput
  }

  export type DirectMessageListRelationFilter = {
    every?: DirectMessageWhereInput
    some?: DirectMessageWhereInput
    none?: DirectMessageWhereInput
  }

  export type MessageRoomListRelationFilter = {
    every?: MessageRoomWhereInput
    some?: MessageRoomWhereInput
    none?: MessageRoomWhereInput
  }

  export type UserAchievListRelationFilter = {
    every?: UserAchievWhereInput
    some?: UserAchievWhereInput
    none?: UserAchievWhereInput
  }

  export type InvitationfriendListRelationFilter = {
    every?: InvitationfriendWhereInput
    some?: InvitationfriendWhereInput
    none?: InvitationfriendWhereInput
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type Match_historyListRelationFilter = {
    every?: match_historyWhereInput
    some?: match_historyWhereInput
    none?: match_historyWhereInput
  }

  export type Users_roomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DirectMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationfriendOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type match_historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    token_google_auth?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    token_google_auth?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    token_google_auth?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    losses?: SortOrder
    wins?: SortOrder
    ladder_level?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RoomRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type Users_roomUsernameRoom_nameCompoundUniqueInput = {
    username: string
    room_name: string
  }

  export type Users_roomCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    user_role?: SortOrder
    room_name?: SortOrder
    state_user?: SortOrder
  }

  export type Users_roomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Users_roomMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    user_role?: SortOrder
    room_name?: SortOrder
    state_user?: SortOrder
  }

  export type Users_roomMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    user_role?: SortOrder
    room_name?: SortOrder
    state_user?: SortOrder
  }

  export type Users_roomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    owner?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    owner?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    owner?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DirectMessageCountOrderByAggregateInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content_msg?: SortOrder
  }

  export type DirectMessageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DirectMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content_msg?: SortOrder
  }

  export type DirectMessageMinOrderByAggregateInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    to?: SortOrder
    content_msg?: SortOrder
  }

  export type DirectMessageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type MessageRoomCountOrderByAggregateInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    room_name?: SortOrder
    content_msg?: SortOrder
  }

  export type MessageRoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MessageRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    room_name?: SortOrder
    content_msg?: SortOrder
  }

  export type MessageRoomMinOrderByAggregateInput = {
    id?: SortOrder
    creationDate?: SortOrder
    from?: SortOrder
    room_name?: SortOrder
    content_msg?: SortOrder
  }

  export type MessageRoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    id_user_2?: SortOrder
    stat_block?: SortOrder
  }

  export type FriendshipAvgOrderByAggregateInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    id_user_2?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    id_user_2?: SortOrder
    stat_block?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    id_user_2?: SortOrder
    stat_block?: SortOrder
  }

  export type FriendshipSumOrderByAggregateInput = {
    id?: SortOrder
    id_user_1?: SortOrder
    id_user_2?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type InvitationfriendId_user_invitedId_user_invit_toCompoundUniqueInput = {
    id_user_invited: number
    id_user_invit_to: number
  }

  export type InvitationfriendCountOrderByAggregateInput = {
    id_user_invited?: SortOrder
    id_user_invit_to?: SortOrder
  }

  export type InvitationfriendAvgOrderByAggregateInput = {
    id_user_invited?: SortOrder
    id_user_invit_to?: SortOrder
  }

  export type InvitationfriendMaxOrderByAggregateInput = {
    id_user_invited?: SortOrder
    id_user_invit_to?: SortOrder
  }

  export type InvitationfriendMinOrderByAggregateInput = {
    id_user_invited?: SortOrder
    id_user_invit_to?: SortOrder
  }

  export type InvitationfriendSumOrderByAggregateInput = {
    id_user_invited?: SortOrder
    id_user_invit_to?: SortOrder
  }

  export type AchievementRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type UserAchievCountOrderByAggregateInput = {
    id?: SortOrder
    achie_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserAchievAvgOrderByAggregateInput = {
    id?: SortOrder
    achie_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserAchievMaxOrderByAggregateInput = {
    id?: SortOrder
    achie_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserAchievMinOrderByAggregateInput = {
    id?: SortOrder
    achie_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserAchievSumOrderByAggregateInput = {
    id?: SortOrder
    achie_id?: SortOrder
    user_id?: SortOrder
  }

  export type AchievementCountOrderByAggregateInput = {
    achiev_id?: SortOrder
    name?: SortOrder
  }

  export type AchievementAvgOrderByAggregateInput = {
    achiev_id?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    achiev_id?: SortOrder
    name?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    achiev_id?: SortOrder
    name?: SortOrder
  }

  export type AchievementSumOrderByAggregateInput = {
    achiev_id?: SortOrder
  }

  export type match_historyCountOrderByAggregateInput = {
    match_id?: SortOrder
    mod?: SortOrder
    match_begin?: SortOrder
    match_end?: SortOrder
    winner_id?: SortOrder
    loser_id?: SortOrder
    score_winner?: SortOrder
    score_loser?: SortOrder
  }

  export type match_historyAvgOrderByAggregateInput = {
    match_id?: SortOrder
    winner_id?: SortOrder
    loser_id?: SortOrder
    score_winner?: SortOrder
    score_loser?: SortOrder
  }

  export type match_historyMaxOrderByAggregateInput = {
    match_id?: SortOrder
    mod?: SortOrder
    match_begin?: SortOrder
    match_end?: SortOrder
    winner_id?: SortOrder
    loser_id?: SortOrder
    score_winner?: SortOrder
    score_loser?: SortOrder
  }

  export type match_historyMinOrderByAggregateInput = {
    match_id?: SortOrder
    mod?: SortOrder
    match_begin?: SortOrder
    match_end?: SortOrder
    winner_id?: SortOrder
    loser_id?: SortOrder
    score_winner?: SortOrder
    score_loser?: SortOrder
  }

  export type match_historySumOrderByAggregateInput = {
    match_id?: SortOrder
    winner_id?: SortOrder
    loser_id?: SortOrder
    score_winner?: SortOrder
    score_loser?: SortOrder
  }

  export type Users_roomCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutUserInput>, Enumerable<Users_roomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutUserInput>
    createMany?: Users_roomCreateManyUserInputEnvelope
    connect?: Enumerable<Users_roomWhereUniqueInput>
  }

  export type RoomCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RoomCreateWithoutUserInput>, Enumerable<RoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutUserInput>
    createMany?: RoomCreateManyUserInputEnvelope
    connect?: Enumerable<RoomWhereUniqueInput>
  }

  export type DirectMessageCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser1Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser1Input>
    createMany?: DirectMessageCreateManyUser1InputEnvelope
    connect?: Enumerable<DirectMessageWhereUniqueInput>
  }

  export type DirectMessageCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser2Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser2Input>
    createMany?: DirectMessageCreateManyUser2InputEnvelope
    connect?: Enumerable<DirectMessageWhereUniqueInput>
  }

  export type MessageRoomCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type UserAchievCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutUserInput>, Enumerable<UserAchievUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutUserInput>
    createMany?: UserAchievCreateManyUserInputEnvelope
    connect?: Enumerable<UserAchievWhereUniqueInput>
  }

  export type InvitationfriendCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser1Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser1Input>
    createMany?: InvitationfriendCreateManyUser1InputEnvelope
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
  }

  export type InvitationfriendCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser2Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser2Input>
    createMany?: InvitationfriendCreateManyUser2InputEnvelope
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
  }

  export type FriendshipCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type match_historyCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser1Input>, Enumerable<match_historyUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser1Input>
    createMany?: match_historyCreateManyUser1InputEnvelope
    connect?: Enumerable<match_historyWhereUniqueInput>
  }

  export type match_historyCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser2Input>, Enumerable<match_historyUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser2Input>
    createMany?: match_historyCreateManyUser2InputEnvelope
    connect?: Enumerable<match_historyWhereUniqueInput>
  }

  export type Users_roomUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutUserInput>, Enumerable<Users_roomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutUserInput>
    createMany?: Users_roomCreateManyUserInputEnvelope
    connect?: Enumerable<Users_roomWhereUniqueInput>
  }

  export type RoomUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RoomCreateWithoutUserInput>, Enumerable<RoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutUserInput>
    createMany?: RoomCreateManyUserInputEnvelope
    connect?: Enumerable<RoomWhereUniqueInput>
  }

  export type DirectMessageUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser1Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser1Input>
    createMany?: DirectMessageCreateManyUser1InputEnvelope
    connect?: Enumerable<DirectMessageWhereUniqueInput>
  }

  export type DirectMessageUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser2Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser2Input>
    createMany?: DirectMessageCreateManyUser2InputEnvelope
    connect?: Enumerable<DirectMessageWhereUniqueInput>
  }

  export type MessageRoomUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type UserAchievUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutUserInput>, Enumerable<UserAchievUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutUserInput>
    createMany?: UserAchievCreateManyUserInputEnvelope
    connect?: Enumerable<UserAchievWhereUniqueInput>
  }

  export type InvitationfriendUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser1Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser1Input>
    createMany?: InvitationfriendCreateManyUser1InputEnvelope
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
  }

  export type InvitationfriendUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser2Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser2Input>
    createMany?: InvitationfriendCreateManyUser2InputEnvelope
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type match_historyUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser1Input>, Enumerable<match_historyUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser1Input>
    createMany?: match_historyCreateManyUser1InputEnvelope
    connect?: Enumerable<match_historyWhereUniqueInput>
  }

  export type match_historyUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser2Input>, Enumerable<match_historyUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser2Input>
    createMany?: match_historyCreateManyUser2InputEnvelope
    connect?: Enumerable<match_historyWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Users_roomUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutUserInput>, Enumerable<Users_roomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Users_roomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Users_roomCreateManyUserInputEnvelope
    set?: Enumerable<Users_roomWhereUniqueInput>
    disconnect?: Enumerable<Users_roomWhereUniqueInput>
    delete?: Enumerable<Users_roomWhereUniqueInput>
    connect?: Enumerable<Users_roomWhereUniqueInput>
    update?: Enumerable<Users_roomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Users_roomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Users_roomScalarWhereInput>
  }

  export type RoomUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RoomCreateWithoutUserInput>, Enumerable<RoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RoomCreateManyUserInputEnvelope
    set?: Enumerable<RoomWhereUniqueInput>
    disconnect?: Enumerable<RoomWhereUniqueInput>
    delete?: Enumerable<RoomWhereUniqueInput>
    connect?: Enumerable<RoomWhereUniqueInput>
    update?: Enumerable<RoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RoomScalarWhereInput>
  }

  export type DirectMessageUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser1Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<DirectMessageUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: DirectMessageCreateManyUser1InputEnvelope
    set?: Enumerable<DirectMessageWhereUniqueInput>
    disconnect?: Enumerable<DirectMessageWhereUniqueInput>
    delete?: Enumerable<DirectMessageWhereUniqueInput>
    connect?: Enumerable<DirectMessageWhereUniqueInput>
    update?: Enumerable<DirectMessageUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<DirectMessageUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<DirectMessageScalarWhereInput>
  }

  export type DirectMessageUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser2Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<DirectMessageUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: DirectMessageCreateManyUser2InputEnvelope
    set?: Enumerable<DirectMessageWhereUniqueInput>
    disconnect?: Enumerable<DirectMessageWhereUniqueInput>
    delete?: Enumerable<DirectMessageWhereUniqueInput>
    connect?: Enumerable<DirectMessageWhereUniqueInput>
    update?: Enumerable<DirectMessageUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<DirectMessageUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<DirectMessageScalarWhereInput>
  }

  export type MessageRoomUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserAchievUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutUserInput>, Enumerable<UserAchievUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAchievUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAchievCreateManyUserInputEnvelope
    set?: Enumerable<UserAchievWhereUniqueInput>
    disconnect?: Enumerable<UserAchievWhereUniqueInput>
    delete?: Enumerable<UserAchievWhereUniqueInput>
    connect?: Enumerable<UserAchievWhereUniqueInput>
    update?: Enumerable<UserAchievUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAchievUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAchievScalarWhereInput>
  }

  export type InvitationfriendUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser1Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<InvitationfriendUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: InvitationfriendCreateManyUser1InputEnvelope
    set?: Enumerable<InvitationfriendWhereUniqueInput>
    disconnect?: Enumerable<InvitationfriendWhereUniqueInput>
    delete?: Enumerable<InvitationfriendWhereUniqueInput>
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
    update?: Enumerable<InvitationfriendUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<InvitationfriendUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<InvitationfriendScalarWhereInput>
  }

  export type InvitationfriendUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser2Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<InvitationfriendUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: InvitationfriendCreateManyUser2InputEnvelope
    set?: Enumerable<InvitationfriendWhereUniqueInput>
    disconnect?: Enumerable<InvitationfriendWhereUniqueInput>
    delete?: Enumerable<InvitationfriendWhereUniqueInput>
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
    update?: Enumerable<InvitationfriendUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<InvitationfriendUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<InvitationfriendScalarWhereInput>
  }

  export type FriendshipUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type match_historyUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser1Input>, Enumerable<match_historyUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<match_historyUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: match_historyCreateManyUser1InputEnvelope
    set?: Enumerable<match_historyWhereUniqueInput>
    disconnect?: Enumerable<match_historyWhereUniqueInput>
    delete?: Enumerable<match_historyWhereUniqueInput>
    connect?: Enumerable<match_historyWhereUniqueInput>
    update?: Enumerable<match_historyUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<match_historyUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<match_historyScalarWhereInput>
  }

  export type match_historyUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser2Input>, Enumerable<match_historyUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<match_historyUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: match_historyCreateManyUser2InputEnvelope
    set?: Enumerable<match_historyWhereUniqueInput>
    disconnect?: Enumerable<match_historyWhereUniqueInput>
    delete?: Enumerable<match_historyWhereUniqueInput>
    connect?: Enumerable<match_historyWhereUniqueInput>
    update?: Enumerable<match_historyUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<match_historyUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<match_historyScalarWhereInput>
  }

  export type Users_roomUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutUserInput>, Enumerable<Users_roomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Users_roomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Users_roomCreateManyUserInputEnvelope
    set?: Enumerable<Users_roomWhereUniqueInput>
    disconnect?: Enumerable<Users_roomWhereUniqueInput>
    delete?: Enumerable<Users_roomWhereUniqueInput>
    connect?: Enumerable<Users_roomWhereUniqueInput>
    update?: Enumerable<Users_roomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Users_roomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Users_roomScalarWhereInput>
  }

  export type RoomUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RoomCreateWithoutUserInput>, Enumerable<RoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RoomCreateManyUserInputEnvelope
    set?: Enumerable<RoomWhereUniqueInput>
    disconnect?: Enumerable<RoomWhereUniqueInput>
    delete?: Enumerable<RoomWhereUniqueInput>
    connect?: Enumerable<RoomWhereUniqueInput>
    update?: Enumerable<RoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RoomScalarWhereInput>
  }

  export type DirectMessageUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser1Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<DirectMessageUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: DirectMessageCreateManyUser1InputEnvelope
    set?: Enumerable<DirectMessageWhereUniqueInput>
    disconnect?: Enumerable<DirectMessageWhereUniqueInput>
    delete?: Enumerable<DirectMessageWhereUniqueInput>
    connect?: Enumerable<DirectMessageWhereUniqueInput>
    update?: Enumerable<DirectMessageUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<DirectMessageUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<DirectMessageScalarWhereInput>
  }

  export type DirectMessageUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<DirectMessageCreateWithoutUser2Input>, Enumerable<DirectMessageUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<DirectMessageCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<DirectMessageUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: DirectMessageCreateManyUser2InputEnvelope
    set?: Enumerable<DirectMessageWhereUniqueInput>
    disconnect?: Enumerable<DirectMessageWhereUniqueInput>
    delete?: Enumerable<DirectMessageWhereUniqueInput>
    connect?: Enumerable<DirectMessageWhereUniqueInput>
    update?: Enumerable<DirectMessageUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<DirectMessageUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<DirectMessageScalarWhereInput>
  }

  export type MessageRoomUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutUserInput>, Enumerable<MessageRoomUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessageRoomCreateManyUserInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserAchievUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutUserInput>, Enumerable<UserAchievUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserAchievUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserAchievCreateManyUserInputEnvelope
    set?: Enumerable<UserAchievWhereUniqueInput>
    disconnect?: Enumerable<UserAchievWhereUniqueInput>
    delete?: Enumerable<UserAchievWhereUniqueInput>
    connect?: Enumerable<UserAchievWhereUniqueInput>
    update?: Enumerable<UserAchievUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserAchievUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserAchievScalarWhereInput>
  }

  export type InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser1Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<InvitationfriendUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: InvitationfriendCreateManyUser1InputEnvelope
    set?: Enumerable<InvitationfriendWhereUniqueInput>
    disconnect?: Enumerable<InvitationfriendWhereUniqueInput>
    delete?: Enumerable<InvitationfriendWhereUniqueInput>
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
    update?: Enumerable<InvitationfriendUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<InvitationfriendUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<InvitationfriendScalarWhereInput>
  }

  export type InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<InvitationfriendCreateWithoutUser2Input>, Enumerable<InvitationfriendUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<InvitationfriendCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<InvitationfriendUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: InvitationfriendCreateManyUser2InputEnvelope
    set?: Enumerable<InvitationfriendWhereUniqueInput>
    disconnect?: Enumerable<InvitationfriendWhereUniqueInput>
    delete?: Enumerable<InvitationfriendWhereUniqueInput>
    connect?: Enumerable<InvitationfriendWhereUniqueInput>
    update?: Enumerable<InvitationfriendUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<InvitationfriendUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<InvitationfriendScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser1Input>, Enumerable<FriendshipUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: FriendshipCreateManyUser1InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutUser2Input>, Enumerable<FriendshipUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: FriendshipCreateManyUser2InputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type match_historyUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser1Input>, Enumerable<match_historyUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<match_historyUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: match_historyCreateManyUser1InputEnvelope
    set?: Enumerable<match_historyWhereUniqueInput>
    disconnect?: Enumerable<match_historyWhereUniqueInput>
    delete?: Enumerable<match_historyWhereUniqueInput>
    connect?: Enumerable<match_historyWhereUniqueInput>
    update?: Enumerable<match_historyUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<match_historyUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<match_historyScalarWhereInput>
  }

  export type match_historyUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<Enumerable<match_historyCreateWithoutUser2Input>, Enumerable<match_historyUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<match_historyCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<match_historyUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: match_historyCreateManyUser2InputEnvelope
    set?: Enumerable<match_historyWhereUniqueInput>
    disconnect?: Enumerable<match_historyWhereUniqueInput>
    delete?: Enumerable<match_historyWhereUniqueInput>
    connect?: Enumerable<match_historyWhereUniqueInput>
    update?: Enumerable<match_historyUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<match_historyUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<match_historyScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUsers_roomInput = {
    create?: XOR<UserCreateWithoutUsers_roomInput, UserUncheckedCreateWithoutUsers_roomInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsers_roomInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutUsers_roomInput = {
    create?: XOR<RoomCreateWithoutUsers_roomInput, RoomUncheckedCreateWithoutUsers_roomInput>
    connectOrCreate?: RoomCreateOrConnectWithoutUsers_roomInput
    connect?: RoomWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUsers_roomNestedInput = {
    create?: XOR<UserCreateWithoutUsers_roomInput, UserUncheckedCreateWithoutUsers_roomInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsers_roomInput
    upsert?: UserUpsertWithoutUsers_roomInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUsers_roomInput, UserUncheckedUpdateWithoutUsers_roomInput>
  }

  export type RoomUpdateOneRequiredWithoutUsers_roomNestedInput = {
    create?: XOR<RoomCreateWithoutUsers_roomInput, RoomUncheckedCreateWithoutUsers_roomInput>
    connectOrCreate?: RoomCreateOrConnectWithoutUsers_roomInput
    upsert?: RoomUpsertWithoutUsers_roomInput
    connect?: RoomWhereUniqueInput
    update?: XOR<RoomUpdateWithoutUsers_roomInput, RoomUncheckedUpdateWithoutUsers_roomInput>
  }

  export type UserCreateNestedOneWithoutRoomInput = {
    create?: XOR<UserCreateWithoutRoomInput, UserUncheckedCreateWithoutRoomInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomInput
    connect?: UserWhereUniqueInput
  }

  export type Users_roomCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutRoomInput>, Enumerable<Users_roomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutRoomInput>
    createMany?: Users_roomCreateManyRoomInputEnvelope
    connect?: Enumerable<Users_roomWhereUniqueInput>
  }

  export type MessageRoomCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type Users_roomUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutRoomInput>, Enumerable<Users_roomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutRoomInput>
    createMany?: Users_roomCreateManyRoomInputEnvelope
    connect?: Enumerable<Users_roomWhereUniqueInput>
  }

  export type MessageRoomUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    connect?: Enumerable<MessageRoomWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutRoomNestedInput = {
    create?: XOR<UserCreateWithoutRoomInput, UserUncheckedCreateWithoutRoomInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomInput
    upsert?: UserUpsertWithoutRoomInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRoomInput, UserUncheckedUpdateWithoutRoomInput>
  }

  export type Users_roomUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutRoomInput>, Enumerable<Users_roomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<Users_roomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: Users_roomCreateManyRoomInputEnvelope
    set?: Enumerable<Users_roomWhereUniqueInput>
    disconnect?: Enumerable<Users_roomWhereUniqueInput>
    delete?: Enumerable<Users_roomWhereUniqueInput>
    connect?: Enumerable<Users_roomWhereUniqueInput>
    update?: Enumerable<Users_roomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<Users_roomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<Users_roomScalarWhereInput>
  }

  export type MessageRoomUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type Users_roomUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<Users_roomCreateWithoutRoomInput>, Enumerable<Users_roomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<Users_roomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<Users_roomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: Users_roomCreateManyRoomInputEnvelope
    set?: Enumerable<Users_roomWhereUniqueInput>
    disconnect?: Enumerable<Users_roomWhereUniqueInput>
    delete?: Enumerable<Users_roomWhereUniqueInput>
    connect?: Enumerable<Users_roomWhereUniqueInput>
    update?: Enumerable<Users_roomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<Users_roomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<Users_roomScalarWhereInput>
  }

  export type MessageRoomUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<Enumerable<MessageRoomCreateWithoutRoomInput>, Enumerable<MessageRoomUncheckedCreateWithoutRoomInput>>
    connectOrCreate?: Enumerable<MessageRoomCreateOrConnectWithoutRoomInput>
    upsert?: Enumerable<MessageRoomUpsertWithWhereUniqueWithoutRoomInput>
    createMany?: MessageRoomCreateManyRoomInputEnvelope
    set?: Enumerable<MessageRoomWhereUniqueInput>
    disconnect?: Enumerable<MessageRoomWhereUniqueInput>
    delete?: Enumerable<MessageRoomWhereUniqueInput>
    connect?: Enumerable<MessageRoomWhereUniqueInput>
    update?: Enumerable<MessageRoomUpdateWithWhereUniqueWithoutRoomInput>
    updateMany?: Enumerable<MessageRoomUpdateManyWithWhereWithoutRoomInput>
    deleteMany?: Enumerable<MessageRoomScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutDirectmsgInput = {
    create?: XOR<UserCreateWithoutDirectmsgInput, UserUncheckedCreateWithoutDirectmsgInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectmsgInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDmInput = {
    create?: XOR<UserCreateWithoutDmInput, UserUncheckedCreateWithoutDmInput>
    connectOrCreate?: UserCreateOrConnectWithoutDmInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutDirectmsgNestedInput = {
    create?: XOR<UserCreateWithoutDirectmsgInput, UserUncheckedCreateWithoutDirectmsgInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectmsgInput
    upsert?: UserUpsertWithoutDirectmsgInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDirectmsgInput, UserUncheckedUpdateWithoutDirectmsgInput>
  }

  export type UserUpdateOneRequiredWithoutDmNestedInput = {
    create?: XOR<UserCreateWithoutDmInput, UserUncheckedCreateWithoutDmInput>
    connectOrCreate?: UserCreateOrConnectWithoutDmInput
    upsert?: UserUpsertWithoutDmInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDmInput, UserUncheckedUpdateWithoutDmInput>
  }

  export type UserCreateNestedOneWithoutMsg_roomInput = {
    create?: XOR<UserCreateWithoutMsg_roomInput, UserUncheckedCreateWithoutMsg_roomInput>
    connectOrCreate?: UserCreateOrConnectWithoutMsg_roomInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutMsg_roomInput = {
    create?: XOR<RoomCreateWithoutMsg_roomInput, RoomUncheckedCreateWithoutMsg_roomInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMsg_roomInput
    connect?: RoomWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMsg_roomNestedInput = {
    create?: XOR<UserCreateWithoutMsg_roomInput, UserUncheckedCreateWithoutMsg_roomInput>
    connectOrCreate?: UserCreateOrConnectWithoutMsg_roomInput
    upsert?: UserUpsertWithoutMsg_roomInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMsg_roomInput, UserUncheckedUpdateWithoutMsg_roomInput>
  }

  export type RoomUpdateOneRequiredWithoutMsg_roomNestedInput = {
    create?: XOR<RoomCreateWithoutMsg_roomInput, RoomUncheckedCreateWithoutMsg_roomInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMsg_roomInput
    upsert?: RoomUpsertWithoutMsg_roomInput
    connect?: RoomWhereUniqueInput
    update?: XOR<RoomUpdateWithoutMsg_roomInput, RoomUncheckedUpdateWithoutMsg_roomInput>
  }

  export type UserCreateNestedOneWithoutFriendInput = {
    create?: XOR<UserCreateWithoutFriendInput, UserUncheckedCreateWithoutFriendInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFriend_relInput = {
    create?: XOR<UserCreateWithoutFriend_relInput, UserUncheckedCreateWithoutFriend_relInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriend_relInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFriendNestedInput = {
    create?: XOR<UserCreateWithoutFriendInput, UserUncheckedCreateWithoutFriendInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendInput
    upsert?: UserUpsertWithoutFriendInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFriendInput, UserUncheckedUpdateWithoutFriendInput>
  }

  export type UserUpdateOneRequiredWithoutFriend_relNestedInput = {
    create?: XOR<UserCreateWithoutFriend_relInput, UserUncheckedCreateWithoutFriend_relInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriend_relInput
    upsert?: UserUpsertWithoutFriend_relInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFriend_relInput, UserUncheckedUpdateWithoutFriend_relInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserCreateNestedOneWithoutInvit_friendInput = {
    create?: XOR<UserCreateWithoutInvit_friendInput, UserUncheckedCreateWithoutInvit_friendInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvit_friendInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInvit_frInput = {
    create?: XOR<UserCreateWithoutInvit_frInput, UserUncheckedCreateWithoutInvit_frInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvit_frInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInvit_friendNestedInput = {
    create?: XOR<UserCreateWithoutInvit_friendInput, UserUncheckedCreateWithoutInvit_friendInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvit_friendInput
    upsert?: UserUpsertWithoutInvit_friendInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInvit_friendInput, UserUncheckedUpdateWithoutInvit_friendInput>
  }

  export type UserUpdateOneRequiredWithoutInvit_frNestedInput = {
    create?: XOR<UserCreateWithoutInvit_frInput, UserUncheckedCreateWithoutInvit_frInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvit_frInput
    upsert?: UserUpsertWithoutInvit_frInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInvit_frInput, UserUncheckedUpdateWithoutInvit_frInput>
  }

  export type AchievementCreateNestedOneWithoutUser_achievInput = {
    create?: XOR<AchievementCreateWithoutUser_achievInput, AchievementUncheckedCreateWithoutUser_achievInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUser_achievInput
    connect?: AchievementWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserachievInput = {
    create?: XOR<UserCreateWithoutUserachievInput, UserUncheckedCreateWithoutUserachievInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserachievInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementUpdateOneRequiredWithoutUser_achievNestedInput = {
    create?: XOR<AchievementCreateWithoutUser_achievInput, AchievementUncheckedCreateWithoutUser_achievInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUser_achievInput
    upsert?: AchievementUpsertWithoutUser_achievInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<AchievementUpdateWithoutUser_achievInput, AchievementUncheckedUpdateWithoutUser_achievInput>
  }

  export type UserUpdateOneRequiredWithoutUserachievNestedInput = {
    create?: XOR<UserCreateWithoutUserachievInput, UserUncheckedCreateWithoutUserachievInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserachievInput
    upsert?: UserUpsertWithoutUserachievInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserachievInput, UserUncheckedUpdateWithoutUserachievInput>
  }

  export type UserAchievCreateNestedManyWithoutAchievementInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutAchievementInput>, Enumerable<UserAchievUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutAchievementInput>
    createMany?: UserAchievCreateManyAchievementInputEnvelope
    connect?: Enumerable<UserAchievWhereUniqueInput>
  }

  export type UserAchievUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutAchievementInput>, Enumerable<UserAchievUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutAchievementInput>
    createMany?: UserAchievCreateManyAchievementInputEnvelope
    connect?: Enumerable<UserAchievWhereUniqueInput>
  }

  export type UserAchievUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutAchievementInput>, Enumerable<UserAchievUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutAchievementInput>
    upsert?: Enumerable<UserAchievUpsertWithWhereUniqueWithoutAchievementInput>
    createMany?: UserAchievCreateManyAchievementInputEnvelope
    set?: Enumerable<UserAchievWhereUniqueInput>
    disconnect?: Enumerable<UserAchievWhereUniqueInput>
    delete?: Enumerable<UserAchievWhereUniqueInput>
    connect?: Enumerable<UserAchievWhereUniqueInput>
    update?: Enumerable<UserAchievUpdateWithWhereUniqueWithoutAchievementInput>
    updateMany?: Enumerable<UserAchievUpdateManyWithWhereWithoutAchievementInput>
    deleteMany?: Enumerable<UserAchievScalarWhereInput>
  }

  export type UserAchievUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<Enumerable<UserAchievCreateWithoutAchievementInput>, Enumerable<UserAchievUncheckedCreateWithoutAchievementInput>>
    connectOrCreate?: Enumerable<UserAchievCreateOrConnectWithoutAchievementInput>
    upsert?: Enumerable<UserAchievUpsertWithWhereUniqueWithoutAchievementInput>
    createMany?: UserAchievCreateManyAchievementInputEnvelope
    set?: Enumerable<UserAchievWhereUniqueInput>
    disconnect?: Enumerable<UserAchievWhereUniqueInput>
    delete?: Enumerable<UserAchievWhereUniqueInput>
    connect?: Enumerable<UserAchievWhereUniqueInput>
    update?: Enumerable<UserAchievUpdateWithWhereUniqueWithoutAchievementInput>
    updateMany?: Enumerable<UserAchievUpdateManyWithWhereWithoutAchievementInput>
    deleteMany?: Enumerable<UserAchievScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMatch_hist1Input = {
    create?: XOR<UserCreateWithoutMatch_hist1Input, UserUncheckedCreateWithoutMatch_hist1Input>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_hist1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatch_hist2Input = {
    create?: XOR<UserCreateWithoutMatch_hist2Input, UserUncheckedCreateWithoutMatch_hist2Input>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_hist2Input
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMatch_hist1NestedInput = {
    create?: XOR<UserCreateWithoutMatch_hist1Input, UserUncheckedCreateWithoutMatch_hist1Input>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_hist1Input
    upsert?: UserUpsertWithoutMatch_hist1Input
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMatch_hist1Input, UserUncheckedUpdateWithoutMatch_hist1Input>
  }

  export type UserUpdateOneRequiredWithoutMatch_hist2NestedInput = {
    create?: XOR<UserCreateWithoutMatch_hist2Input, UserUncheckedCreateWithoutMatch_hist2Input>
    connectOrCreate?: UserCreateOrConnectWithoutMatch_hist2Input
    upsert?: UserUpsertWithoutMatch_hist2Input
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMatch_hist2Input, UserUncheckedUpdateWithoutMatch_hist2Input>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type Users_roomCreateWithoutUserInput = {
    user_role: string
    room: RoomCreateNestedOneWithoutUsers_roomInput
    state_user: string
  }

  export type Users_roomUncheckedCreateWithoutUserInput = {
    id?: number
    user_role: string
    room_name: string
    state_user: string
  }

  export type Users_roomCreateOrConnectWithoutUserInput = {
    where: Users_roomWhereUniqueInput
    create: XOR<Users_roomCreateWithoutUserInput, Users_roomUncheckedCreateWithoutUserInput>
  }

  export type Users_roomCreateManyUserInputEnvelope = {
    data: Enumerable<Users_roomCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RoomCreateWithoutUserInput = {
    name: string
    type: string
    password?: string | null
    users_room?: Users_roomCreateNestedManyWithoutRoomInput
    msg_room?: MessageRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    type: string
    password?: string | null
    users_room?: Users_roomUncheckedCreateNestedManyWithoutRoomInput
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutUserInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutUserInput, RoomUncheckedCreateWithoutUserInput>
  }

  export type RoomCreateManyUserInputEnvelope = {
    data: Enumerable<RoomCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DirectMessageCreateWithoutUser1Input = {
    creationDate?: Date | string
    user2: UserCreateNestedOneWithoutDmInput
    content_msg: string
  }

  export type DirectMessageUncheckedCreateWithoutUser1Input = {
    id?: number
    creationDate?: Date | string
    to: string
    content_msg: string
  }

  export type DirectMessageCreateOrConnectWithoutUser1Input = {
    where: DirectMessageWhereUniqueInput
    create: XOR<DirectMessageCreateWithoutUser1Input, DirectMessageUncheckedCreateWithoutUser1Input>
  }

  export type DirectMessageCreateManyUser1InputEnvelope = {
    data: Enumerable<DirectMessageCreateManyUser1Input>
    skipDuplicates?: boolean
  }

  export type DirectMessageCreateWithoutUser2Input = {
    creationDate?: Date | string
    user1: UserCreateNestedOneWithoutDirectmsgInput
    content_msg: string
  }

  export type DirectMessageUncheckedCreateWithoutUser2Input = {
    id?: number
    creationDate?: Date | string
    from: string
    content_msg: string
  }

  export type DirectMessageCreateOrConnectWithoutUser2Input = {
    where: DirectMessageWhereUniqueInput
    create: XOR<DirectMessageCreateWithoutUser2Input, DirectMessageUncheckedCreateWithoutUser2Input>
  }

  export type DirectMessageCreateManyUser2InputEnvelope = {
    data: Enumerable<DirectMessageCreateManyUser2Input>
    skipDuplicates?: boolean
  }

  export type MessageRoomCreateWithoutUserInput = {
    creationDate?: Date | string
    room: RoomCreateNestedOneWithoutMsg_roomInput
    content_msg: string
  }

  export type MessageRoomUncheckedCreateWithoutUserInput = {
    id?: number
    creationDate?: Date | string
    room_name: string
    content_msg: string
  }

  export type MessageRoomCreateOrConnectWithoutUserInput = {
    where: MessageRoomWhereUniqueInput
    create: XOR<MessageRoomCreateWithoutUserInput, MessageRoomUncheckedCreateWithoutUserInput>
  }

  export type MessageRoomCreateManyUserInputEnvelope = {
    data: Enumerable<MessageRoomCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserAchievCreateWithoutUserInput = {
    achievement: AchievementCreateNestedOneWithoutUser_achievInput
  }

  export type UserAchievUncheckedCreateWithoutUserInput = {
    id?: number
    achie_id: number
  }

  export type UserAchievCreateOrConnectWithoutUserInput = {
    where: UserAchievWhereUniqueInput
    create: XOR<UserAchievCreateWithoutUserInput, UserAchievUncheckedCreateWithoutUserInput>
  }

  export type UserAchievCreateManyUserInputEnvelope = {
    data: Enumerable<UserAchievCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type InvitationfriendCreateWithoutUser1Input = {
    user2: UserCreateNestedOneWithoutInvit_frInput
  }

  export type InvitationfriendUncheckedCreateWithoutUser1Input = {
    id_user_invit_to: number
  }

  export type InvitationfriendCreateOrConnectWithoutUser1Input = {
    where: InvitationfriendWhereUniqueInput
    create: XOR<InvitationfriendCreateWithoutUser1Input, InvitationfriendUncheckedCreateWithoutUser1Input>
  }

  export type InvitationfriendCreateManyUser1InputEnvelope = {
    data: Enumerable<InvitationfriendCreateManyUser1Input>
    skipDuplicates?: boolean
  }

  export type InvitationfriendCreateWithoutUser2Input = {
    user1: UserCreateNestedOneWithoutInvit_friendInput
  }

  export type InvitationfriendUncheckedCreateWithoutUser2Input = {
    id_user_invited: number
  }

  export type InvitationfriendCreateOrConnectWithoutUser2Input = {
    where: InvitationfriendWhereUniqueInput
    create: XOR<InvitationfriendCreateWithoutUser2Input, InvitationfriendUncheckedCreateWithoutUser2Input>
  }

  export type InvitationfriendCreateManyUser2InputEnvelope = {
    data: Enumerable<InvitationfriendCreateManyUser2Input>
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutUser1Input = {
    user2: UserCreateNestedOneWithoutFriend_relInput
    stat_block?: boolean
  }

  export type FriendshipUncheckedCreateWithoutUser1Input = {
    id?: number
    id_user_2: number
    stat_block?: boolean
  }

  export type FriendshipCreateOrConnectWithoutUser1Input = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutUser1Input, FriendshipUncheckedCreateWithoutUser1Input>
  }

  export type FriendshipCreateManyUser1InputEnvelope = {
    data: Enumerable<FriendshipCreateManyUser1Input>
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutUser2Input = {
    user1: UserCreateNestedOneWithoutFriendInput
    stat_block?: boolean
  }

  export type FriendshipUncheckedCreateWithoutUser2Input = {
    id?: number
    id_user_1: number
    stat_block?: boolean
  }

  export type FriendshipCreateOrConnectWithoutUser2Input = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutUser2Input, FriendshipUncheckedCreateWithoutUser2Input>
  }

  export type FriendshipCreateManyUser2InputEnvelope = {
    data: Enumerable<FriendshipCreateManyUser2Input>
    skipDuplicates?: boolean
  }

  export type match_historyCreateWithoutUser1Input = {
    mod: string
    match_begin: Date | string
    match_end: Date | string
    user2: UserCreateNestedOneWithoutMatch_hist2Input
    score_winner: number
    score_loser: number
  }

  export type match_historyUncheckedCreateWithoutUser1Input = {
    match_id?: number
    mod: string
    match_begin: Date | string
    match_end: Date | string
    loser_id: number
    score_winner: number
    score_loser: number
  }

  export type match_historyCreateOrConnectWithoutUser1Input = {
    where: match_historyWhereUniqueInput
    create: XOR<match_historyCreateWithoutUser1Input, match_historyUncheckedCreateWithoutUser1Input>
  }

  export type match_historyCreateManyUser1InputEnvelope = {
    data: Enumerable<match_historyCreateManyUser1Input>
    skipDuplicates?: boolean
  }

  export type match_historyCreateWithoutUser2Input = {
    mod: string
    match_begin: Date | string
    match_end: Date | string
    user1: UserCreateNestedOneWithoutMatch_hist1Input
    score_winner: number
    score_loser: number
  }

  export type match_historyUncheckedCreateWithoutUser2Input = {
    match_id?: number
    mod: string
    match_begin: Date | string
    match_end: Date | string
    winner_id: number
    score_winner: number
    score_loser: number
  }

  export type match_historyCreateOrConnectWithoutUser2Input = {
    where: match_historyWhereUniqueInput
    create: XOR<match_historyCreateWithoutUser2Input, match_historyUncheckedCreateWithoutUser2Input>
  }

  export type match_historyCreateManyUser2InputEnvelope = {
    data: Enumerable<match_historyCreateManyUser2Input>
    skipDuplicates?: boolean
  }

  export type Users_roomUpsertWithWhereUniqueWithoutUserInput = {
    where: Users_roomWhereUniqueInput
    update: XOR<Users_roomUpdateWithoutUserInput, Users_roomUncheckedUpdateWithoutUserInput>
    create: XOR<Users_roomCreateWithoutUserInput, Users_roomUncheckedCreateWithoutUserInput>
  }

  export type Users_roomUpdateWithWhereUniqueWithoutUserInput = {
    where: Users_roomWhereUniqueInput
    data: XOR<Users_roomUpdateWithoutUserInput, Users_roomUncheckedUpdateWithoutUserInput>
  }

  export type Users_roomUpdateManyWithWhereWithoutUserInput = {
    where: Users_roomScalarWhereInput
    data: XOR<Users_roomUpdateManyMutationInput, Users_roomUncheckedUpdateManyWithoutUsers_roomInput>
  }

  export type Users_roomScalarWhereInput = {
    AND?: Enumerable<Users_roomScalarWhereInput>
    OR?: Enumerable<Users_roomScalarWhereInput>
    NOT?: Enumerable<Users_roomScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    user_role?: StringFilter | string
    room_name?: StringFilter | string
    state_user?: StringFilter | string
  }

  export type RoomUpsertWithWhereUniqueWithoutUserInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutUserInput, RoomUncheckedUpdateWithoutUserInput>
    create: XOR<RoomCreateWithoutUserInput, RoomUncheckedCreateWithoutUserInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutUserInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutUserInput, RoomUncheckedUpdateWithoutUserInput>
  }

  export type RoomUpdateManyWithWhereWithoutUserInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutRoomInput>
  }

  export type RoomScalarWhereInput = {
    AND?: Enumerable<RoomScalarWhereInput>
    OR?: Enumerable<RoomScalarWhereInput>
    NOT?: Enumerable<RoomScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    password?: StringNullableFilter | string | null
    owner?: StringFilter | string
  }

  export type DirectMessageUpsertWithWhereUniqueWithoutUser1Input = {
    where: DirectMessageWhereUniqueInput
    update: XOR<DirectMessageUpdateWithoutUser1Input, DirectMessageUncheckedUpdateWithoutUser1Input>
    create: XOR<DirectMessageCreateWithoutUser1Input, DirectMessageUncheckedCreateWithoutUser1Input>
  }

  export type DirectMessageUpdateWithWhereUniqueWithoutUser1Input = {
    where: DirectMessageWhereUniqueInput
    data: XOR<DirectMessageUpdateWithoutUser1Input, DirectMessageUncheckedUpdateWithoutUser1Input>
  }

  export type DirectMessageUpdateManyWithWhereWithoutUser1Input = {
    where: DirectMessageScalarWhereInput
    data: XOR<DirectMessageUpdateManyMutationInput, DirectMessageUncheckedUpdateManyWithoutDirectmsgInput>
  }

  export type DirectMessageScalarWhereInput = {
    AND?: Enumerable<DirectMessageScalarWhereInput>
    OR?: Enumerable<DirectMessageScalarWhereInput>
    NOT?: Enumerable<DirectMessageScalarWhereInput>
    id?: IntFilter | number
    creationDate?: DateTimeFilter | Date | string
    from?: StringFilter | string
    to?: StringFilter | string
    content_msg?: StringFilter | string
  }

  export type DirectMessageUpsertWithWhereUniqueWithoutUser2Input = {
    where: DirectMessageWhereUniqueInput
    update: XOR<DirectMessageUpdateWithoutUser2Input, DirectMessageUncheckedUpdateWithoutUser2Input>
    create: XOR<DirectMessageCreateWithoutUser2Input, DirectMessageUncheckedCreateWithoutUser2Input>
  }

  export type DirectMessageUpdateWithWhereUniqueWithoutUser2Input = {
    where: DirectMessageWhereUniqueInput
    data: XOR<DirectMessageUpdateWithoutUser2Input, DirectMessageUncheckedUpdateWithoutUser2Input>
  }

  export type DirectMessageUpdateManyWithWhereWithoutUser2Input = {
    where: DirectMessageScalarWhereInput
    data: XOR<DirectMessageUpdateManyMutationInput, DirectMessageUncheckedUpdateManyWithoutDmInput>
  }

  export type MessageRoomUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageRoomWhereUniqueInput
    update: XOR<MessageRoomUpdateWithoutUserInput, MessageRoomUncheckedUpdateWithoutUserInput>
    create: XOR<MessageRoomCreateWithoutUserInput, MessageRoomUncheckedCreateWithoutUserInput>
  }

  export type MessageRoomUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageRoomWhereUniqueInput
    data: XOR<MessageRoomUpdateWithoutUserInput, MessageRoomUncheckedUpdateWithoutUserInput>
  }

  export type MessageRoomUpdateManyWithWhereWithoutUserInput = {
    where: MessageRoomScalarWhereInput
    data: XOR<MessageRoomUpdateManyMutationInput, MessageRoomUncheckedUpdateManyWithoutMsg_roomInput>
  }

  export type MessageRoomScalarWhereInput = {
    AND?: Enumerable<MessageRoomScalarWhereInput>
    OR?: Enumerable<MessageRoomScalarWhereInput>
    NOT?: Enumerable<MessageRoomScalarWhereInput>
    id?: IntFilter | number
    creationDate?: DateTimeFilter | Date | string
    from?: StringFilter | string
    room_name?: StringFilter | string
    content_msg?: StringFilter | string
  }

  export type UserAchievUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievWhereUniqueInput
    update: XOR<UserAchievUpdateWithoutUserInput, UserAchievUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievCreateWithoutUserInput, UserAchievUncheckedCreateWithoutUserInput>
  }

  export type UserAchievUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievWhereUniqueInput
    data: XOR<UserAchievUpdateWithoutUserInput, UserAchievUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievScalarWhereInput
    data: XOR<UserAchievUpdateManyMutationInput, UserAchievUncheckedUpdateManyWithoutUserachievInput>
  }

  export type UserAchievScalarWhereInput = {
    AND?: Enumerable<UserAchievScalarWhereInput>
    OR?: Enumerable<UserAchievScalarWhereInput>
    NOT?: Enumerable<UserAchievScalarWhereInput>
    id?: IntFilter | number
    achie_id?: IntFilter | number
    user_id?: IntFilter | number
  }

  export type InvitationfriendUpsertWithWhereUniqueWithoutUser1Input = {
    where: InvitationfriendWhereUniqueInput
    update: XOR<InvitationfriendUpdateWithoutUser1Input, InvitationfriendUncheckedUpdateWithoutUser1Input>
    create: XOR<InvitationfriendCreateWithoutUser1Input, InvitationfriendUncheckedCreateWithoutUser1Input>
  }

  export type InvitationfriendUpdateWithWhereUniqueWithoutUser1Input = {
    where: InvitationfriendWhereUniqueInput
    data: XOR<InvitationfriendUpdateWithoutUser1Input, InvitationfriendUncheckedUpdateWithoutUser1Input>
  }

  export type InvitationfriendUpdateManyWithWhereWithoutUser1Input = {
    where: InvitationfriendScalarWhereInput
    data: XOR<InvitationfriendUpdateManyMutationInput, InvitationfriendUncheckedUpdateManyWithoutInvit_friendInput>
  }

  export type InvitationfriendScalarWhereInput = {
    AND?: Enumerable<InvitationfriendScalarWhereInput>
    OR?: Enumerable<InvitationfriendScalarWhereInput>
    NOT?: Enumerable<InvitationfriendScalarWhereInput>
    id_user_invited?: IntFilter | number
    id_user_invit_to?: IntFilter | number
  }

  export type InvitationfriendUpsertWithWhereUniqueWithoutUser2Input = {
    where: InvitationfriendWhereUniqueInput
    update: XOR<InvitationfriendUpdateWithoutUser2Input, InvitationfriendUncheckedUpdateWithoutUser2Input>
    create: XOR<InvitationfriendCreateWithoutUser2Input, InvitationfriendUncheckedCreateWithoutUser2Input>
  }

  export type InvitationfriendUpdateWithWhereUniqueWithoutUser2Input = {
    where: InvitationfriendWhereUniqueInput
    data: XOR<InvitationfriendUpdateWithoutUser2Input, InvitationfriendUncheckedUpdateWithoutUser2Input>
  }

  export type InvitationfriendUpdateManyWithWhereWithoutUser2Input = {
    where: InvitationfriendScalarWhereInput
    data: XOR<InvitationfriendUpdateManyMutationInput, InvitationfriendUncheckedUpdateManyWithoutInvit_frInput>
  }

  export type FriendshipUpsertWithWhereUniqueWithoutUser1Input = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutUser1Input, FriendshipUncheckedUpdateWithoutUser1Input>
    create: XOR<FriendshipCreateWithoutUser1Input, FriendshipUncheckedCreateWithoutUser1Input>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutUser1Input = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutUser1Input, FriendshipUncheckedUpdateWithoutUser1Input>
  }

  export type FriendshipUpdateManyWithWhereWithoutUser1Input = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutFriendInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: Enumerable<FriendshipScalarWhereInput>
    OR?: Enumerable<FriendshipScalarWhereInput>
    NOT?: Enumerable<FriendshipScalarWhereInput>
    id?: IntFilter | number
    id_user_1?: IntFilter | number
    id_user_2?: IntFilter | number
    stat_block?: BoolFilter | boolean
  }

  export type FriendshipUpsertWithWhereUniqueWithoutUser2Input = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutUser2Input, FriendshipUncheckedUpdateWithoutUser2Input>
    create: XOR<FriendshipCreateWithoutUser2Input, FriendshipUncheckedCreateWithoutUser2Input>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutUser2Input = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutUser2Input, FriendshipUncheckedUpdateWithoutUser2Input>
  }

  export type FriendshipUpdateManyWithWhereWithoutUser2Input = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutFriend_relInput>
  }

  export type match_historyUpsertWithWhereUniqueWithoutUser1Input = {
    where: match_historyWhereUniqueInput
    update: XOR<match_historyUpdateWithoutUser1Input, match_historyUncheckedUpdateWithoutUser1Input>
    create: XOR<match_historyCreateWithoutUser1Input, match_historyUncheckedCreateWithoutUser1Input>
  }

  export type match_historyUpdateWithWhereUniqueWithoutUser1Input = {
    where: match_historyWhereUniqueInput
    data: XOR<match_historyUpdateWithoutUser1Input, match_historyUncheckedUpdateWithoutUser1Input>
  }

  export type match_historyUpdateManyWithWhereWithoutUser1Input = {
    where: match_historyScalarWhereInput
    data: XOR<match_historyUpdateManyMutationInput, match_historyUncheckedUpdateManyWithoutMatch_hist1Input>
  }

  export type match_historyScalarWhereInput = {
    AND?: Enumerable<match_historyScalarWhereInput>
    OR?: Enumerable<match_historyScalarWhereInput>
    NOT?: Enumerable<match_historyScalarWhereInput>
    match_id?: IntFilter | number
    mod?: StringFilter | string
    match_begin?: DateTimeFilter | Date | string
    match_end?: DateTimeFilter | Date | string
    winner_id?: IntFilter | number
    loser_id?: IntFilter | number
    score_winner?: IntFilter | number
    score_loser?: IntFilter | number
  }

  export type match_historyUpsertWithWhereUniqueWithoutUser2Input = {
    where: match_historyWhereUniqueInput
    update: XOR<match_historyUpdateWithoutUser2Input, match_historyUncheckedUpdateWithoutUser2Input>
    create: XOR<match_historyCreateWithoutUser2Input, match_historyUncheckedCreateWithoutUser2Input>
  }

  export type match_historyUpdateWithWhereUniqueWithoutUser2Input = {
    where: match_historyWhereUniqueInput
    data: XOR<match_historyUpdateWithoutUser2Input, match_historyUncheckedUpdateWithoutUser2Input>
  }

  export type match_historyUpdateManyWithWhereWithoutUser2Input = {
    where: match_historyScalarWhereInput
    data: XOR<match_historyUpdateManyMutationInput, match_historyUncheckedUpdateManyWithoutMatch_hist2Input>
  }

  export type UserCreateWithoutUsers_roomInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutUsers_roomInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutUsers_roomInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsers_roomInput, UserUncheckedCreateWithoutUsers_roomInput>
  }

  export type RoomCreateWithoutUsers_roomInput = {
    name: string
    type: string
    password?: string | null
    user: UserCreateNestedOneWithoutRoomInput
    msg_room?: MessageRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutUsers_roomInput = {
    id?: number
    name: string
    type: string
    password?: string | null
    owner: string
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutUsers_roomInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutUsers_roomInput, RoomUncheckedCreateWithoutUsers_roomInput>
  }

  export type UserUpsertWithoutUsers_roomInput = {
    update: XOR<UserUpdateWithoutUsers_roomInput, UserUncheckedUpdateWithoutUsers_roomInput>
    create: XOR<UserCreateWithoutUsers_roomInput, UserUncheckedCreateWithoutUsers_roomInput>
  }

  export type UserUpdateWithoutUsers_roomInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutUsers_roomInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type RoomUpsertWithoutUsers_roomInput = {
    update: XOR<RoomUpdateWithoutUsers_roomInput, RoomUncheckedUpdateWithoutUsers_roomInput>
    create: XOR<RoomCreateWithoutUsers_roomInput, RoomUncheckedCreateWithoutUsers_roomInput>
  }

  export type RoomUpdateWithoutUsers_roomInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutRoomNestedInput
    msg_room?: MessageRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutUsers_roomInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: StringFieldUpdateOperationsInput | string
    msg_room?: MessageRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserCreateWithoutRoomInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutRoomInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutRoomInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomInput, UserUncheckedCreateWithoutRoomInput>
  }

  export type Users_roomCreateWithoutRoomInput = {
    user: UserCreateNestedOneWithoutUsers_roomInput
    user_role: string
    state_user: string
  }

  export type Users_roomUncheckedCreateWithoutRoomInput = {
    id?: number
    username: string
    user_role: string
    state_user: string
  }

  export type Users_roomCreateOrConnectWithoutRoomInput = {
    where: Users_roomWhereUniqueInput
    create: XOR<Users_roomCreateWithoutRoomInput, Users_roomUncheckedCreateWithoutRoomInput>
  }

  export type Users_roomCreateManyRoomInputEnvelope = {
    data: Enumerable<Users_roomCreateManyRoomInput>
    skipDuplicates?: boolean
  }

  export type MessageRoomCreateWithoutRoomInput = {
    creationDate?: Date | string
    user: UserCreateNestedOneWithoutMsg_roomInput
    content_msg: string
  }

  export type MessageRoomUncheckedCreateWithoutRoomInput = {
    id?: number
    creationDate?: Date | string
    from: string
    content_msg: string
  }

  export type MessageRoomCreateOrConnectWithoutRoomInput = {
    where: MessageRoomWhereUniqueInput
    create: XOR<MessageRoomCreateWithoutRoomInput, MessageRoomUncheckedCreateWithoutRoomInput>
  }

  export type MessageRoomCreateManyRoomInputEnvelope = {
    data: Enumerable<MessageRoomCreateManyRoomInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRoomInput = {
    update: XOR<UserUpdateWithoutRoomInput, UserUncheckedUpdateWithoutRoomInput>
    create: XOR<UserCreateWithoutRoomInput, UserUncheckedCreateWithoutRoomInput>
  }

  export type UserUpdateWithoutRoomInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type Users_roomUpsertWithWhereUniqueWithoutRoomInput = {
    where: Users_roomWhereUniqueInput
    update: XOR<Users_roomUpdateWithoutRoomInput, Users_roomUncheckedUpdateWithoutRoomInput>
    create: XOR<Users_roomCreateWithoutRoomInput, Users_roomUncheckedCreateWithoutRoomInput>
  }

  export type Users_roomUpdateWithWhereUniqueWithoutRoomInput = {
    where: Users_roomWhereUniqueInput
    data: XOR<Users_roomUpdateWithoutRoomInput, Users_roomUncheckedUpdateWithoutRoomInput>
  }

  export type Users_roomUpdateManyWithWhereWithoutRoomInput = {
    where: Users_roomScalarWhereInput
    data: XOR<Users_roomUpdateManyMutationInput, Users_roomUncheckedUpdateManyWithoutUsers_roomInput>
  }

  export type MessageRoomUpsertWithWhereUniqueWithoutRoomInput = {
    where: MessageRoomWhereUniqueInput
    update: XOR<MessageRoomUpdateWithoutRoomInput, MessageRoomUncheckedUpdateWithoutRoomInput>
    create: XOR<MessageRoomCreateWithoutRoomInput, MessageRoomUncheckedCreateWithoutRoomInput>
  }

  export type MessageRoomUpdateWithWhereUniqueWithoutRoomInput = {
    where: MessageRoomWhereUniqueInput
    data: XOR<MessageRoomUpdateWithoutRoomInput, MessageRoomUncheckedUpdateWithoutRoomInput>
  }

  export type MessageRoomUpdateManyWithWhereWithoutRoomInput = {
    where: MessageRoomScalarWhereInput
    data: XOR<MessageRoomUpdateManyMutationInput, MessageRoomUncheckedUpdateManyWithoutMsg_roomInput>
  }

  export type UserCreateWithoutDirectmsgInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutDirectmsgInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutDirectmsgInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDirectmsgInput, UserUncheckedCreateWithoutDirectmsgInput>
  }

  export type UserCreateWithoutDmInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutDmInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutDmInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDmInput, UserUncheckedCreateWithoutDmInput>
  }

  export type UserUpsertWithoutDirectmsgInput = {
    update: XOR<UserUpdateWithoutDirectmsgInput, UserUncheckedUpdateWithoutDirectmsgInput>
    create: XOR<UserCreateWithoutDirectmsgInput, UserUncheckedCreateWithoutDirectmsgInput>
  }

  export type UserUpdateWithoutDirectmsgInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutDirectmsgInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserUpsertWithoutDmInput = {
    update: XOR<UserUpdateWithoutDmInput, UserUncheckedUpdateWithoutDmInput>
    create: XOR<UserCreateWithoutDmInput, UserUncheckedCreateWithoutDmInput>
  }

  export type UserUpdateWithoutDmInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutDmInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserCreateWithoutMsg_roomInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutMsg_roomInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutMsg_roomInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMsg_roomInput, UserUncheckedCreateWithoutMsg_roomInput>
  }

  export type RoomCreateWithoutMsg_roomInput = {
    name: string
    type: string
    password?: string | null
    user: UserCreateNestedOneWithoutRoomInput
    users_room?: Users_roomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutMsg_roomInput = {
    id?: number
    name: string
    type: string
    password?: string | null
    owner: string
    users_room?: Users_roomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutMsg_roomInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutMsg_roomInput, RoomUncheckedCreateWithoutMsg_roomInput>
  }

  export type UserUpsertWithoutMsg_roomInput = {
    update: XOR<UserUpdateWithoutMsg_roomInput, UserUncheckedUpdateWithoutMsg_roomInput>
    create: XOR<UserCreateWithoutMsg_roomInput, UserUncheckedCreateWithoutMsg_roomInput>
  }

  export type UserUpdateWithoutMsg_roomInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutMsg_roomInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type RoomUpsertWithoutMsg_roomInput = {
    update: XOR<RoomUpdateWithoutMsg_roomInput, RoomUncheckedUpdateWithoutMsg_roomInput>
    create: XOR<RoomCreateWithoutMsg_roomInput, RoomUncheckedCreateWithoutMsg_roomInput>
  }

  export type RoomUpdateWithoutMsg_roomInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutRoomNestedInput
    users_room?: Users_roomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutMsg_roomInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: StringFieldUpdateOperationsInput | string
    users_room?: Users_roomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserCreateWithoutFriendInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutFriendInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutFriendInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendInput, UserUncheckedCreateWithoutFriendInput>
  }

  export type UserCreateWithoutFriend_relInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutFriend_relInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutFriend_relInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriend_relInput, UserUncheckedCreateWithoutFriend_relInput>
  }

  export type UserUpsertWithoutFriendInput = {
    update: XOR<UserUpdateWithoutFriendInput, UserUncheckedUpdateWithoutFriendInput>
    create: XOR<UserCreateWithoutFriendInput, UserUncheckedCreateWithoutFriendInput>
  }

  export type UserUpdateWithoutFriendInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutFriendInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserUpsertWithoutFriend_relInput = {
    update: XOR<UserUpdateWithoutFriend_relInput, UserUncheckedUpdateWithoutFriend_relInput>
    create: XOR<UserCreateWithoutFriend_relInput, UserUncheckedCreateWithoutFriend_relInput>
  }

  export type UserUpdateWithoutFriend_relInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutFriend_relInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserCreateWithoutInvit_friendInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutInvit_friendInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutInvit_friendInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvit_friendInput, UserUncheckedCreateWithoutInvit_friendInput>
  }

  export type UserCreateWithoutInvit_frInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutInvit_frInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutInvit_frInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvit_frInput, UserUncheckedCreateWithoutInvit_frInput>
  }

  export type UserUpsertWithoutInvit_friendInput = {
    update: XOR<UserUpdateWithoutInvit_friendInput, UserUncheckedUpdateWithoutInvit_friendInput>
    create: XOR<UserCreateWithoutInvit_friendInput, UserUncheckedCreateWithoutInvit_friendInput>
  }

  export type UserUpdateWithoutInvit_friendInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutInvit_friendInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserUpsertWithoutInvit_frInput = {
    update: XOR<UserUpdateWithoutInvit_frInput, UserUncheckedUpdateWithoutInvit_frInput>
    create: XOR<UserCreateWithoutInvit_frInput, UserUncheckedCreateWithoutInvit_frInput>
  }

  export type UserUpdateWithoutInvit_frInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutInvit_frInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type AchievementCreateWithoutUser_achievInput = {
    name: string
  }

  export type AchievementUncheckedCreateWithoutUser_achievInput = {
    achiev_id?: number
    name: string
  }

  export type AchievementCreateOrConnectWithoutUser_achievInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUser_achievInput, AchievementUncheckedCreateWithoutUser_achievInput>
  }

  export type UserCreateWithoutUserachievInput = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutUserachievInput = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutUserachievInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserachievInput, UserUncheckedCreateWithoutUserachievInput>
  }

  export type AchievementUpsertWithoutUser_achievInput = {
    update: XOR<AchievementUpdateWithoutUser_achievInput, AchievementUncheckedUpdateWithoutUser_achievInput>
    create: XOR<AchievementCreateWithoutUser_achievInput, AchievementUncheckedCreateWithoutUser_achievInput>
  }

  export type AchievementUpdateWithoutUser_achievInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AchievementUncheckedUpdateWithoutUser_achievInput = {
    achiev_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutUserachievInput = {
    update: XOR<UserUpdateWithoutUserachievInput, UserUncheckedUpdateWithoutUserachievInput>
    create: XOR<UserCreateWithoutUserachievInput, UserUncheckedCreateWithoutUserachievInput>
  }

  export type UserUpdateWithoutUserachievInput = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutUserachievInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserAchievCreateWithoutAchievementInput = {
    user: UserCreateNestedOneWithoutUserachievInput
  }

  export type UserAchievUncheckedCreateWithoutAchievementInput = {
    id?: number
    user_id: number
  }

  export type UserAchievCreateOrConnectWithoutAchievementInput = {
    where: UserAchievWhereUniqueInput
    create: XOR<UserAchievCreateWithoutAchievementInput, UserAchievUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievCreateManyAchievementInputEnvelope = {
    data: Enumerable<UserAchievCreateManyAchievementInput>
    skipDuplicates?: boolean
  }

  export type UserAchievUpsertWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievWhereUniqueInput
    update: XOR<UserAchievUpdateWithoutAchievementInput, UserAchievUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserAchievCreateWithoutAchievementInput, UserAchievUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievUpdateWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievWhereUniqueInput
    data: XOR<UserAchievUpdateWithoutAchievementInput, UserAchievUncheckedUpdateWithoutAchievementInput>
  }

  export type UserAchievUpdateManyWithWhereWithoutAchievementInput = {
    where: UserAchievScalarWhereInput
    data: XOR<UserAchievUpdateManyMutationInput, UserAchievUncheckedUpdateManyWithoutUser_achievInput>
  }

  export type UserCreateWithoutMatch_hist1Input = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist2?: match_historyCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutMatch_hist1Input = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist2?: match_historyUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutMatch_hist1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatch_hist1Input, UserUncheckedCreateWithoutMatch_hist1Input>
  }

  export type UserCreateWithoutMatch_hist2Input = {
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomCreateNestedManyWithoutUserInput
    room?: RoomCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageCreateNestedManyWithoutUser1Input
    dm?: DirectMessageCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomCreateNestedManyWithoutUserInput
    userachiev?: UserAchievCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendCreateNestedManyWithoutUser2Input
    friend?: FriendshipCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyCreateNestedManyWithoutUser1Input
  }

  export type UserUncheckedCreateWithoutMatch_hist2Input = {
    id?: number
    login: string
    username: string
    avatar?: string | null
    email?: string | null
    token_google_auth?: string | null
    losses?: number
    wins?: number
    ladder_level?: number
    users_room?: Users_roomUncheckedCreateNestedManyWithoutUserInput
    room?: RoomUncheckedCreateNestedManyWithoutUserInput
    directmsg?: DirectMessageUncheckedCreateNestedManyWithoutUser1Input
    dm?: DirectMessageUncheckedCreateNestedManyWithoutUser2Input
    msg_room?: MessageRoomUncheckedCreateNestedManyWithoutUserInput
    userachiev?: UserAchievUncheckedCreateNestedManyWithoutUserInput
    invit_friend?: InvitationfriendUncheckedCreateNestedManyWithoutUser1Input
    invit_fr?: InvitationfriendUncheckedCreateNestedManyWithoutUser2Input
    friend?: FriendshipUncheckedCreateNestedManyWithoutUser1Input
    friend_rel?: FriendshipUncheckedCreateNestedManyWithoutUser2Input
    match_hist1?: match_historyUncheckedCreateNestedManyWithoutUser1Input
  }

  export type UserCreateOrConnectWithoutMatch_hist2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatch_hist2Input, UserUncheckedCreateWithoutMatch_hist2Input>
  }

  export type UserUpsertWithoutMatch_hist1Input = {
    update: XOR<UserUpdateWithoutMatch_hist1Input, UserUncheckedUpdateWithoutMatch_hist1Input>
    create: XOR<UserCreateWithoutMatch_hist1Input, UserUncheckedCreateWithoutMatch_hist1Input>
  }

  export type UserUpdateWithoutMatch_hist1Input = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist2?: match_historyUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutMatch_hist1Input = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist2?: match_historyUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserUpsertWithoutMatch_hist2Input = {
    update: XOR<UserUpdateWithoutMatch_hist2Input, UserUncheckedUpdateWithoutMatch_hist2Input>
    create: XOR<UserCreateWithoutMatch_hist2Input, UserUncheckedCreateWithoutMatch_hist2Input>
  }

  export type UserUpdateWithoutMatch_hist2Input = {
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUpdateManyWithoutUserNestedInput
    room?: RoomUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUpdateManyWithoutUser1NestedInput
  }

  export type UserUncheckedUpdateWithoutMatch_hist2Input = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    token_google_auth?: NullableStringFieldUpdateOperationsInput | string | null
    losses?: IntFieldUpdateOperationsInput | number
    wins?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    users_room?: Users_roomUncheckedUpdateManyWithoutUserNestedInput
    room?: RoomUncheckedUpdateManyWithoutUserNestedInput
    directmsg?: DirectMessageUncheckedUpdateManyWithoutUser1NestedInput
    dm?: DirectMessageUncheckedUpdateManyWithoutUser2NestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutUserNestedInput
    userachiev?: UserAchievUncheckedUpdateManyWithoutUserNestedInput
    invit_friend?: InvitationfriendUncheckedUpdateManyWithoutUser1NestedInput
    invit_fr?: InvitationfriendUncheckedUpdateManyWithoutUser2NestedInput
    friend?: FriendshipUncheckedUpdateManyWithoutUser1NestedInput
    friend_rel?: FriendshipUncheckedUpdateManyWithoutUser2NestedInput
    match_hist1?: match_historyUncheckedUpdateManyWithoutUser1NestedInput
  }

  export type Users_roomCreateManyUserInput = {
    id?: number
    user_role: string
    room_name: string
    state_user: string
  }

  export type RoomCreateManyUserInput = {
    id?: number
    name: string
    type: string
    password?: string | null
  }

  export type DirectMessageCreateManyUser1Input = {
    id?: number
    creationDate?: Date | string
    to: string
    content_msg: string
  }

  export type DirectMessageCreateManyUser2Input = {
    id?: number
    creationDate?: Date | string
    from: string
    content_msg: string
  }

  export type MessageRoomCreateManyUserInput = {
    id?: number
    creationDate?: Date | string
    room_name: string
    content_msg: string
  }

  export type UserAchievCreateManyUserInput = {
    id?: number
    achie_id: number
  }

  export type InvitationfriendCreateManyUser1Input = {
    id_user_invit_to: number
  }

  export type InvitationfriendCreateManyUser2Input = {
    id_user_invited: number
  }

  export type FriendshipCreateManyUser1Input = {
    id?: number
    id_user_2: number
    stat_block?: boolean
  }

  export type FriendshipCreateManyUser2Input = {
    id?: number
    id_user_1: number
    stat_block?: boolean
  }

  export type match_historyCreateManyUser1Input = {
    match_id?: number
    mod: string
    match_begin: Date | string
    match_end: Date | string
    loser_id: number
    score_winner: number
    score_loser: number
  }

  export type match_historyCreateManyUser2Input = {
    match_id?: number
    mod: string
    match_begin: Date | string
    match_end: Date | string
    winner_id: number
    score_winner: number
    score_loser: number
  }

  export type Users_roomUpdateWithoutUserInput = {
    user_role?: StringFieldUpdateOperationsInput | string
    room?: RoomUpdateOneRequiredWithoutUsers_roomNestedInput
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type Users_roomUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
    room_name?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type Users_roomUncheckedUpdateManyWithoutUsers_roomInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_role?: StringFieldUpdateOperationsInput | string
    room_name?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users_room?: Users_roomUpdateManyWithoutRoomNestedInput
    msg_room?: MessageRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users_room?: Users_roomUncheckedUpdateManyWithoutRoomNestedInput
    msg_room?: MessageRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DirectMessageUpdateWithoutUser1Input = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user2?: UserUpdateOneRequiredWithoutDmNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    to?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUncheckedUpdateManyWithoutDirectmsgInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    to?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUpdateWithoutUser2Input = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutDirectmsgNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type DirectMessageUncheckedUpdateManyWithoutDmInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUpdateWithoutUserInput = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutMsg_roomNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    room_name?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUncheckedUpdateManyWithoutMsg_roomInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    room_name?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievUpdateWithoutUserInput = {
    achievement?: AchievementUpdateOneRequiredWithoutUser_achievNestedInput
  }

  export type UserAchievUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    achie_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserAchievUncheckedUpdateManyWithoutUserachievInput = {
    id?: IntFieldUpdateOperationsInput | number
    achie_id?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationfriendUpdateWithoutUser1Input = {
    user2?: UserUpdateOneRequiredWithoutInvit_frNestedInput
  }

  export type InvitationfriendUncheckedUpdateWithoutUser1Input = {
    id_user_invit_to?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationfriendUncheckedUpdateManyWithoutInvit_friendInput = {
    id_user_invit_to?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationfriendUpdateWithoutUser2Input = {
    user1?: UserUpdateOneRequiredWithoutInvit_friendNestedInput
  }

  export type InvitationfriendUncheckedUpdateWithoutUser2Input = {
    id_user_invited?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationfriendUncheckedUpdateManyWithoutInvit_frInput = {
    id_user_invited?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipUpdateWithoutUser1Input = {
    user2?: UserUpdateOneRequiredWithoutFriend_relNestedInput
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    id_user_2?: IntFieldUpdateOperationsInput | number
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyWithoutFriendInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user_2?: IntFieldUpdateOperationsInput | number
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUpdateWithoutUser2Input = {
    user1?: UserUpdateOneRequiredWithoutFriendNestedInput
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    id_user_1?: IntFieldUpdateOperationsInput | number
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendshipUncheckedUpdateManyWithoutFriend_relInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user_1?: IntFieldUpdateOperationsInput | number
    stat_block?: BoolFieldUpdateOperationsInput | boolean
  }

  export type match_historyUpdateWithoutUser1Input = {
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    user2?: UserUpdateOneRequiredWithoutMatch_hist2NestedInput
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUncheckedUpdateWithoutUser1Input = {
    match_id?: IntFieldUpdateOperationsInput | number
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    loser_id?: IntFieldUpdateOperationsInput | number
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUncheckedUpdateManyWithoutMatch_hist1Input = {
    match_id?: IntFieldUpdateOperationsInput | number
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    loser_id?: IntFieldUpdateOperationsInput | number
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUpdateWithoutUser2Input = {
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutMatch_hist1NestedInput
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUncheckedUpdateWithoutUser2Input = {
    match_id?: IntFieldUpdateOperationsInput | number
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    winner_id?: IntFieldUpdateOperationsInput | number
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type match_historyUncheckedUpdateManyWithoutMatch_hist2Input = {
    match_id?: IntFieldUpdateOperationsInput | number
    mod?: StringFieldUpdateOperationsInput | string
    match_begin?: DateTimeFieldUpdateOperationsInput | Date | string
    match_end?: DateTimeFieldUpdateOperationsInput | Date | string
    winner_id?: IntFieldUpdateOperationsInput | number
    score_winner?: IntFieldUpdateOperationsInput | number
    score_loser?: IntFieldUpdateOperationsInput | number
  }

  export type Users_roomCreateManyRoomInput = {
    id?: number
    username: string
    user_role: string
    state_user: string
  }

  export type MessageRoomCreateManyRoomInput = {
    id?: number
    creationDate?: Date | string
    from: string
    content_msg: string
  }

  export type Users_roomUpdateWithoutRoomInput = {
    user?: UserUpdateOneRequiredWithoutUsers_roomNestedInput
    user_role?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type Users_roomUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    user_role?: StringFieldUpdateOperationsInput | string
    state_user?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUpdateWithoutRoomInput = {
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMsg_roomNestedInput
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type MessageRoomUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    from?: StringFieldUpdateOperationsInput | string
    content_msg?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievCreateManyAchievementInput = {
    id?: number
    user_id: number
  }

  export type UserAchievUpdateWithoutAchievementInput = {
    user?: UserUpdateOneRequiredWithoutUserachievNestedInput
  }

  export type UserAchievUncheckedUpdateWithoutAchievementInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserAchievUncheckedUpdateManyWithoutUser_achievInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}